ID,NL description,FRETish,LTL
classifier_assumption,The robot should always report seeing either none a trained person or a untrained person. ,sRobot shall always satisfy classifier=0 xor classifier=1 xor classifier=2,(H (((classifier = 0) xor (classifier = 1)) xor (classifier = 2)))
dtt assumption, While seeing any person the distance to target should always be at or above 0. ,While !(classifier=0) the sRobot shall always satisfy distance.to.target>=0,(H ((! (classifier = 0)) -> (distance_to_target >= 0)))
operationalstate_0,While in operational state 0 the robot should run without slowdown halt alert or the turn off UVC being active. ,While OpState = 0 sRobot shall always satisfy (!slowdown & !halt & !alert & !turnoffUVC),(H ((OpState = 0) -> ((((! slowdown) & (! halt)) & (! alert)) & (! turnoffUVC))))
operationalstate_1, While in operational state 1 the robot should have alert active while slowdown halt and turn off UVC are inactive. ,While OpState = 1 sRobot shall always satisfy (!slowdown & !halt & alert & !turnoffUVC),(H ((OpState = 1) -> ((((! slowdown) & (! halt)) & alert) & (! turnoffUVC))))
operationalstate_2,While in operational state 2 the robot should have slowdown and alert active while halt and turn off UVC are inactive. ,While OpState = 2 sRobot shall always satisfy (slowdown & !halt & alert & !turnoffUVC),(H ((OpState = 2) -> (((slowdown & (! halt)) & alert) & (! turnoffUVC))))
operationalstate_3,While in operational state 3 the robot should have halt and turn off UVC active while slowdown and alert are inactive. ,While OpState = 3 sRobot shall always satisfy (!slowdown & halt & alert & turnoffUVC),(H ((OpState = 3) -> ((((! slowdown) & halt) & alert) & turnoffUVC)))
state_req000,While classifier reports none the robot should be in operational state 0. ,While classifier = 0 sRobot shall always satisfy OpState=0,(H ((classifier = 0) -> (OpState = 0)))
state_req101,while classifier reports a worker 7+ meters away the robot should be in state 1. ,While classifier = 1 sRobot shall always satisfy (dgt.7 -> OpState=1),(H ((classifier = 1) -> (dgt_7 -> (OpState = 1))))
state_req102,While classifier reports a worker between 3 and 7 meters the robot should be in state 2. ,While classifier = 1 sRobot shall always satisfy (! dgt.7 & dgt.3 -> OpState=2),(H ((classifier = 1) -> (((! dgt_7) & dgt_3) -> (OpState = 2))))
state_req103,While classifier reports a worker within 3 meters the robot should be in state 3 ,While classifier = 1 sRobot shall always satisfy (! dgt.3 -> OpState=3),(H ((classifier = 1) -> ((! dgt_3) -> (OpState = 3))))
state_req201,While classifier reports untrained person 7+ meters away the robot should be in state 2. , While classifier = 2 sRobot shall always satisfy (dgt.7 -> OpState=2),(H ((classifier = 2) -> (dgt_7 -> (OpState = 2))))
state_req202,While classifier reports untrained person between 3 and 7 meters the robot should be in state 3. ,While classifier = 2 sRobot shall always satisfy (! dgt.7 & dgt.3 -> OpState=3),(H ((classifier = 2) -> (((! dgt_7) & dgt_3) -> (OpState = 3))))
state_req203,While classifier reports untrained person within 3 meters the robot should be in state 3.,While classifier = 2 sRobot shall always satisfy (! dgt.3 -> OpState=3),(H ((classifier = 2) -> ((! dgt_3) -> (OpState = 3))))
