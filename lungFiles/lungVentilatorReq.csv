ID;NL description;FRETish;LTL;
FUN.4;The system shall implement the following operating modes: Start/up mode, SelfTest mode, Standby mode, Pressure Controlled Ventilation mode, Pressure Support Ventilation mode, Fail-safe mode;System shall always satisfy StartUpMode | SelfTestMode | StandbyMode | PCVMode | PSVMode | FailSafeMode;(H (((((StartUpMode | SelfTestMode) | StandbyMode) | PCVMode) | PSVMode) | FailSafeMode));
FUN.5;The Start-up Mode shall be initiated by pushing the power button of the system once the system has been connected to the breathing circuit (without connection to the patient), the air supply, and the power source.;when powerButton & (breathingCircuitConnected & !(patientConnected) & airSupplyConnected & powerConnected) System shall at the next timepoint satisfy StartUpMode;(H ((Y ((powerButton & (((breathingCircuitConnected & (! patientConnected)) & airSupplyConnected) & powerConnected)) & (Z (! (powerButton & (((breathingCircuitConnected & (! patientConnected)) & airSupplyConnected) & powerConnected)))))) -> (StartUpMode | (! (Y TRUE)))));
FUN.5.1;Upon initiation of the Start-up Mode, the system shall go through an initialization process that loads default parameters and checks the system memory and the communication of the controller with the sensors and valves, as well as between the controller and the GUI.;in StartUpMode System shall eventually satisfy initStart & checkCommsSensors & checkCommsValves & checkCommsGUI;((H (((! StartUpMode) & (Y StartUpMode)) -> (Y (! ((! (((initStart & checkCommsSensors) & checkCommsValves) & checkCommsGUI)) S ((! (((initStart & checkCommsSensors) & checkCommsValves) & checkCommsGUI)) & (StartUpMode & (Z (! StartUpMode))))))))) & (((! ((! StartUpMode) & (Y StartUpMode))) S ((! ((! StartUpMode) & (Y StartUpMode))) & (StartUpMode & (Z (! StartUpMode))))) -> (! ((! (((initStart & checkCommsSensors) & checkCommsValves) & checkCommsGUI)) S ((! (((initStart & checkCommsSensors) & checkCommsValves) & checkCommsGUI)) & (StartUpMode & (Z (! StartUpMode))))))));
FUN.5.2;The system shall indicate to the user that the initialization process has been completed successfully or failed. In case of a failure the user shall be warned that the system is out-of-service. In addition, any other operations shall be not allowed.;in StartUpMode System shall eventually satisfy initDone | (initFail & OutOfServiceWarning & FailSafeMode);((H (((! StartUpMode) & (Y StartUpMode)) -> (Y (! ((! (initDone | ((initFail & OutOfServiceWarning) & FailSafeMode))) S ((! (initDone | ((initFail & OutOfServiceWarning) & FailSafeMode))) & (StartUpMode & (Z (! StartUpMode))))))))) & (((! ((! StartUpMode) & (Y StartUpMode))) S ((! ((! StartUpMode) & (Y StartUpMode))) & (StartUpMode & (Z (! StartUpMode))))) -> (! ((! (initDone | ((initFail & OutOfServiceWarning) & FailSafeMode))) S ((! (initDone | ((initFail & OutOfServiceWarning) & FailSafeMode))) & (StartUpMode & (Z (! StartUpMode))))))));
FUN.5.3;The patient shall not be connected to the breathing circuit when the system is powered on and through start-up and self-test.;System shall always satisfy (StartUpMode | SelfTestMode) -> !patientConnected;(H ((StartUpMode | SelfTestMode) -> (! patientConnected)));
FUN.6;The system shall have a self-test procedure that ensures the system and its accessories are fully functional and the alarms work.;in SelfTestMode System shall eventually satisfy selfTestPassed | selfTestFailed;((H (((! SelfTestMode) & (Y SelfTestMode)) -> (Y (! ((! (selfTestPassed | selfTestFailed)) S ((! (selfTestPassed | selfTestFailed)) & (SelfTestMode & (Z (! SelfTestMode))))))))) & (((! ((! SelfTestMode) & (Y SelfTestMode))) S ((! ((! SelfTestMode) & (Y SelfTestMode))) & (SelfTestMode & (Z (! SelfTestMode))))) -> (! ((! (selfTestPassed | selfTestFailed)) S ((! (selfTestPassed | selfTestFailed)) & (SelfTestMode & (Z (! SelfTestMode))))))));
FUN.6.1;The self-test procedure shall confirm the switchover from external to internal power works.;in SelfTestMode System shall eventually satisfy testPowerSwitchPass | testPowerSwitchFail | testPowerSwitchSkip;((H (((! SelfTestMode) & (Y SelfTestMode)) -> (Y (! ((! ((testPowerSwitchPass | testPowerSwitchFail) | testPowerSwitchSkip)) S ((! ((testPowerSwitchPass | testPowerSwitchFail) | testPowerSwitchSkip)) & (SelfTestMode & (Z (! SelfTestMode))))))))) & (((! ((! SelfTestMode) & (Y SelfTestMode))) S ((! ((! SelfTestMode) & (Y SelfTestMode))) & (SelfTestMode & (Z (! SelfTestMode))))) -> (! ((! ((testPowerSwitchPass | testPowerSwitchFail) | testPowerSwitchSkip)) S ((! ((testPowerSwitchPass | testPowerSwitchFail) | testPowerSwitchSkip)) & (SelfTestMode & (Z (! SelfTestMode))))))));
FUN.6.2;The self-test procedure shall confirm there are no unacceptable leaks in the breathing circuit.;in SelfTestMode System shall eventually satisfy testLeaksPass | testLeaksFail | testLeaksSkip;((H (((! SelfTestMode) & (Y SelfTestMode)) -> (Y (! ((! ((testLeaksPass | testLeaksFail) | testLeaksSkip)) S ((! ((testLeaksPass | testLeaksFail) | testLeaksSkip)) & (SelfTestMode & (Z (! SelfTestMode))))))))) & (((! ((! SelfTestMode) & (Y SelfTestMode))) S ((! ((! SelfTestMode) & (Y SelfTestMode))) & (SelfTestMode & (Z (! SelfTestMode))))) -> (! ((! ((testLeaksPass | testLeaksFail) | testLeaksSkip)) S ((! ((testLeaksPass | testLeaksFail) | testLeaksSkip)) & (SelfTestMode & (Z (! SelfTestMode))))))));
FUN.6.3;The self-test procedure shall confirm the FI2 flow meter (see Figure 2.2) in the patient breathing circuit is connected in the right direction and is calibrated.;in SelfTestMode System shall eventually satisfy testFL2Pass | testFL2Fail | testFL2Skip;((H (((! SelfTestMode) & (Y SelfTestMode)) -> (Y (! ((! ((testFL2Pass | testFL2Fail) | testFL2Skip)) S ((! ((testFL2Pass | testFL2Fail) | testFL2Skip)) & (SelfTestMode & (Z (! SelfTestMode))))))))) & (((! ((! SelfTestMode) & (Y SelfTestMode))) S ((! ((! SelfTestMode) & (Y SelfTestMode))) & (SelfTestMode & (Z (! SelfTestMode))))) -> (! ((! ((testFL2Pass | testFL2Fail) | testFL2Skip)) S ((! ((testFL2Pass | testFL2Fail) | testFL2Skip)) & (SelfTestMode & (Z (! SelfTestMode))))))));
FUN.6.4;The self-test procedure shall confirm the expiratory valve is functional.;in SelfTestMode System shall eventually satisfy testPSExpPass | testPSExpFail | testPSExpSkip;((H (((! SelfTestMode) & (Y SelfTestMode)) -> (Y (! ((! ((testPSExpPass | testPSExpFail) | testPSExpSkip)) S ((! ((testPSExpPass | testPSExpFail) | testPSExpSkip)) & (SelfTestMode & (Z (! SelfTestMode))))))))) & (((! ((! SelfTestMode) & (Y SelfTestMode))) S ((! ((! SelfTestMode) & (Y SelfTestMode))) & (SelfTestMode & (Z (! SelfTestMode))))) -> (! ((! ((testPSExpPass | testPSExpFail) | testPSExpSkip)) S ((! ((testPSExpPass | testPSExpFail) | testPSExpSkip)) & (SelfTestMode & (Z (! SelfTestMode))))))));
FUN.6.5;The self-test procedure shall confirm the oxygen sensor is calibrated.;in SelfTestMode System shall eventually satisfy testOxygenSensorPass | testOxygenSensorFail | testOxygenSensorSkip;((H (((! SelfTestMode) & (Y SelfTestMode)) -> (Y (! ((! ((testOxygenSensorPass | testOxygenSensorFail) | testOxygenSensorSkip)) S ((! ((testOxygenSensorPass | testOxygenSensorFail) | testOxygenSensorSkip)) & (SelfTestMode & (Z (! SelfTestMode))))))))) & (((! ((! SelfTestMode) & (Y SelfTestMode))) S ((! ((! SelfTestMode) & (Y SelfTestMode))) & (SelfTestMode & (Z (! SelfTestMode))))) -> (! ((! ((testOxygenSensorPass | testOxygenSensorFail) | testOxygenSensorSkip)) S ((! ((testOxygenSensorPass | testOxygenSensorFail) | testOxygenSensorSkip)) & (SelfTestMode & (Z (! SelfTestMode))))))));
FUN.6.6;The self-test procedure shall confirm the local alarms are functional.;in SelfTestMode System shall eventually satisfy testAlarmsPass | testAlarmsFail | testAlarmsSkip;((H (((! SelfTestMode) & (Y SelfTestMode)) -> (Y (! ((! ((testAlarmsPass | testAlarmsFail) | testAlarmsSkip)) S ((! ((testAlarmsPass | testAlarmsFail) | testAlarmsSkip)) & (SelfTestMode & (Z (! SelfTestMode))))))))) & (((! ((! SelfTestMode) & (Y SelfTestMode))) S ((! ((! SelfTestMode) & (Y SelfTestMode))) & (SelfTestMode & (Z (! SelfTestMode))))) -> (! ((! ((testAlarmsPass | testAlarmsFail) | testAlarmsSkip)) S ((! ((testAlarmsPass | testAlarmsFail) | testAlarmsSkip)) & (SelfTestMode & (Z (! SelfTestMode))))))));
FUN.7;If the self-test fails, the user shall be warned that the system is out-of-service. In addition, any other operations shall be not allowed.;in SelfTestMode if selfTestFail shall at the next timepoint satisfy OutOfServiceWarning & FailSafeMode;((H (((! SelfTestMode) & (Y SelfTestMode)) -> (Y (((Y (SelfTestMode & (Z (! SelfTestMode)))) -> (OutOfServiceWarning & FailSafeMode)) S (((Y (SelfTestMode & (Z (! SelfTestMode)))) -> (OutOfServiceWarning & FailSafeMode)) & (SelfTestMode & (Z (! SelfTestMode)))))))) & (((! ((! SelfTestMode) & (Y SelfTestMode))) S ((! ((! SelfTestMode) & (Y SelfTestMode))) & (SelfTestMode & (Z (! SelfTestMode))))) -> (((Y (SelfTestMode & (Z (! SelfTestMode)))) -> (OutOfServiceWarning & FailSafeMode)) S (((Y (SelfTestMode & (Z (! SelfTestMode)))) -> (OutOfServiceWarning & FailSafeMode)) & (SelfTestMode & (Z (! SelfTestMode)))))));
FUN.8;The system shall log key parameters, save them before being powered off and load them upon start-up to be made available on a log page on the GUI.;System shall always satisfy logParams & saveLog & loadLog;(H ((logParams & saveLog) & loadLog));
FUN.8.5;The system shall not permit the healthcare professional operator to erase the contents of the alarm system log.;System shall always satisfy if user = operator then !eraseLog;(H ((user = operator) -> (! eraseLog)));
FUN.8.6;The system shall provide a log to include any change of ventilator settings, including the value applied;when ventilatorSettingsChanged System shall at the next timepoint satisfy logVentilatorSettings;(H ((Y (ventilatorSettingsChanged & (Z (! ventilatorSettingsChanged)))) -> (logVentilatorSettings | (! (Y TRUE)))));
FUN.8.7;The system shall provide a log to include any change of alarm settings, including the value applied;when alarmSettingsChanged System shall at the next timepoint satisfy logAlarmSettings;(H ((Y (alarmSettingsChanged & (Z (! alarmSettingsChanged)))) -> (logAlarmSettings | (! (Y TRUE)))));
FUN.8.8;"The system shall provide a log to include change of patient, including the patient attributes;";when patientChanged System shall at the next timepoint satisfy logPatientChange;(H ((Y (patientChanged & (Z (! patientChanged)))) -> (logPatientChange | (! (Y TRUE)))));
FUN.8.9;The system shall provide a log to include power supply source change, including the source utilized;when powerSupplyChanged System shall at the next timepoint satisfy logPowerSupply;(H ((Y (powerSupplyChanged & (Z (! powerSupplyChanged)))) -> (logPowerSupply | (! (Y TRUE)))));
FUN.8.10;The system shall provide a log to include results of the pre-use check.;when preUseCheckDone System shall at the next timepoint satisfy logPreUseCheck;(H ((Y (preUseCheckDone & (Z (! preUseCheckDone)))) -> (logPreUseCheck | (! (Y TRUE)))));
FUN.8.11;The system shall provide a log to include the overall duration of the active use of the O2 sensor (%-hours);System shall always satisfy logO2SensorUse;(H logO2SensorUse);
FUN.8.12;The system shall log user-set ventilation and alarm parameters as well as the current calibration parameters.;System shall always satisfy logVentilationParams & logAlarmParams & logCalibrationParams;(H ((logVentilationParams & logAlarmParams) & logCalibrationParams));
FUN.9;Once the self-test has been completed successfully and configurations have been loaded properly the system shall start monitoring and reporting health parameters.;when selfTestPassed System shall at the next timepoint satisfy startMonitoring & startReportingHealthParams & StandbyMode;(H ((Y (selfTestPassed & (Z (! selfTestPassed)))) -> (((startMonitoring & startReportingHealthParams) & StandbyMode) | (! (Y TRUE)))));
FUN.10;Once the start-up has been completed successfully the user must select “New Patient” or “Resume Ventilation” before the system transitions to self-test mode;when StartUpDone System shall eventually satisfy newPatient | resumeVentilation;((H (! StartUpDone)) | (! ((! (newPatient | resumeVentilation)) S ((! (newPatient | resumeVentilation)) & (StartUpDone & (Z (! StartUpDone)))))));
FUN.10.1;If “New Patient” is selected, the user shall have to enter patient attributes and the completion of every step of the self-test procedure (FUN.6) shall be mandatory;when newPatient System shall eventually satisfy patientAttributesEntered & SelfTestMode & ((testPowerSwitchPass & testLeaksPass & testFL2Pass & testPSExpPass & testOxygenSensorPass & testAlarmsPass) => selfTestPassed);((H (! newPatient)) | (! ((! ((patientAttributesEntered & SelfTestMode) & ((((((testPowerSwitchPass & testLeaksPass) & testFL2Pass) & testPSExpPass) & testOxygenSensorPass) & testAlarmsPass) -> selfTestPassed))) S ((! ((patientAttributesEntered & SelfTestMode) & ((((((testPowerSwitchPass & testLeaksPass) & testFL2Pass) & testPSExpPass) & testOxygenSensorPass) & testAlarmsPass) -> selfTestPassed))) & (newPatient & (Z (! newPatient)))))));
FUN.10.2;If “Resume Ventilation” is selected, the system shall load the last calibration parameters, alarm thresholds, and ventilation parameters from the last active patient ventilation.;when resumeVentilation System shall at the next timepoint satisfy loadLastParams;(H ((Y (resumeVentilation & (Z (! resumeVentilation)))) -> (loadLastParams | (! (Y TRUE)))));
FUN.10.3;If “Resume Ventilation” is selected, every step of the selftest procedure FUN.6 can be skipped or optionally rerun individually.;when resumeVentilation System shall eventually satisfy SelfTestMode & ((testPowerSwitchPass | testPowerSwitchSkip) & (testLeaksPass | testLeaksSkip) & (testFL2Pass | testFL2Skip) & (testPSExpPass | testPSExpSkip) & (testOxygenSensorPass | testOxygenSensorSkip) & (testAlarmsPass | testAlarmsSkip)) => selfTestPassed);((H (! resumeVentilation)) | (! ((! ((SelfTestMode & ((((((testPowerSwitchPass | testPowerSwitchSkip) & (testLeaksPass | testLeaksSkip)) & (testFL2Pass | testFL2Skip)) & (testPSExpPass | testPSExpSkip)) & (testOxygenSensorPass | testOxygenSensorSkip)) & (testAlarmsPass | testAlarmsSkip))) -> selfTestPassed)) S ((! ((SelfTestMode & ((((((testPowerSwitchPass | testPowerSwitchSkip) & (testLeaksPass | testLeaksSkip)) & (testFL2Pass | testFL2Skip)) & (testPSExpPass | testPSExpSkip)) & (testOxygenSensorPass | testOxygenSensorSkip)) & (testAlarmsPass | testAlarmsSkip))) -> selfTestPassed)) & (resumeVentilation & (Z (! resumeVentilation)))))));
FUN.10.4;Once all self-test steps have been completed successfully, it shall be possible to proceed to the Standby Mode.;when selfTestPassed System shall at the next timepoint satisfy StandbyMode;(H ((Y (selfTestPassed & (Z (! selfTestPassed)))) -> (StandbyMode | (! (Y TRUE)))));
FUN.10.5;In Standby Mode ventilation shall be off and it shall be possible to adjust all user-controlled parameters for ventilation and alarms before connecting to the patient and starting patient ventilation.;in StandbyMode System shall always satisfy ventilationOff & ventilationParamsAdjustable;(H (StandbyMode -> (ventilationOff & ventilationParamsAdjustable)));
FUN.10.6;Once the power of the system has been off for more than 15 minutes it shall not be possible to select “Resume Ventilation”;when off System shall after 15 minutes satisfy !resumeVentilation;((H ((O[0,15] (off & (Z (! off)))) -> ((H (! off)) | resumeVentilation))) & (H ((O[16,16] ((off & (Z (! off))) & resumeVentilation)) -> (O[0,15] ((! (Y TRUE)) | (! resumeVentilation))))));
FUN.11;The system shall connect to pressurized gas supply of oxygen and medical air and accept pressures up to 5.2 bar.;System shall always satisfy GBPS <= 5.2;(H (GBPS <= 5.2));
FUN.13;The system shall measure and display the breathing rate (number of breathes per minute).;System shall always satisfy measureRR & displayRR;(H (measureRR & displayRR));
FUN.14;The system shall measure and display the percentage of oxygen in the gas being delivered to the patient.;System shall always satisfy measureO2% & displayO2%;(H (measureO2_PRC_ & displayO2_PRC_));
FUN.15;The system shall measure the ventilator pressure at/near the inlet to the patient.;System shall always satisfy measurePSins;(H measurePSins);
FUN.16;The system shall measure and display the volume of gas delivered to the patient per breathing cycle (tidal volume).;System shall always satisfy measureTV & displayTV;(H (measureTV & displayTV));
FUN.17;The system shall measure and display the flow of gas delivered to the patient per breathing cycle.;System shall always satisfy measureF11 & displayF11;(H (measureF11 & displayF11));
FUN.18;The system shall have a leak compensation feature for leaks in the patient breathing circuit which shall be disabled by default.;System shall always satisfy (if enableLeakCompensation then leakCompensation) | !leakCompensation;(H ((enableLeakCompensation -> leakCompensation) | (! leakCompensation)));
FUN.18.1;The user shall be able to disable/enable the leak compensation feature at any time.;System shall always satisfy (if enableLeakCompensation then leakCompensation) & (if disableLeakCompensation then (!leakCompensation & !enableLeakCompensation));(H ((enableLeakCompensation -> leakCompensation) & (disableLeakCompensation -> ((! leakCompensation) & (! enableLeakCompensation)))));
FUN.18.2;When enabled, the leak compensation shall be activated by the Min PEEP alarm (SAV.15);when leakCompensationEnable if MinPEEPAtmAnalyzer System shall at the next timepoint satisfy leakCompensationActive;(H ((Y ((leakCompensationEnable & MinPEEPAtmAnalyzer) & (Z (! (leakCompensationEnable & MinPEEPAtmAnalyzer))))) -> (leakCompensationActive | (! (Y TRUE)))));
FUN.20;In PCV mode, the breathing cycle shall be defined by inspiratory pressure Pinsp PCV relative to atmosphere, respiratory rate (RRPCV ) and the ratio between the inspiratory and expiratory times (I:EPCV ).;in PCVMode System shall always satisfy breathingCycleTime = 1/RR_PCV & ExpiratoryTime = breathingCycleTime / (1+ItoE_PCV);(H (PCVMode -> ((breathingCycleTime = (1 / RR_PCV)) & (ExpiratoryTime = (breathingCycleTime / (1 + ItoE_PCV))))));
FUN.21;In PCV mode, a new breathing cycle shall be initiated either after a breathing cycle is over, or by patient request during expiration.;in PCVMode System shall always satisfy (breathingCycleDone | patientBreathingRequest) => breathingCycleStart;(H (PCVMode -> ((breathingCycleDone | patientBreathingRequest) -> breathingCycleStart)));
FUN.21.1;A new breathing cycle shall be initiated by a sudden drop in pressure above a user-settable threshold (Inhale Trigger Sensitivity).;when inspiratoryPressure < InhaleTriggerSensitivityPCV System shall at the next timepoint satisfy breathingCycleStart;(H ((Y ((inspiratoryPressure < InhaleTriggerSensitivityPCV) & (Z (! (inspiratoryPressure < InhaleTriggerSensitivityPCV))))) -> (breathingCycleStart | (! (Y TRUE)))));
FUN.21.2;A patient breath trigger shall reset the timer for the timecycled breathing cycle.;when patientBreathTrigger System shall at the next timepoint satisfy breathingTimerReset;(H ((Y (patientBreathTrigger & (Z (! patientBreathTrigger)))) -> (breathingTimerReset | (! (Y TRUE)))));
FUN.22;In PCV mode it shall be possible to initiate with the push of a single button a lung recruitment procedure, termed Recruitment Maneuver (RM).;in PCVMode when RMButton System shall at the next timepoint satisfy RM;((H (((! PCVMode) & (Y PCVMode)) -> (Y (((Y (RMButton & ((Y (! RMButton)) | (PCVMode & (Z (! PCVMode)))))) -> (RM | (PCVMode & (Z (! PCVMode))))) S (((Y (RMButton & ((Y (! RMButton)) | (PCVMode & (Z (! PCVMode)))))) -> (RM | (PCVMode & (Z (! PCVMode))))) & (PCVMode & (Z (! PCVMode)))))))) & (((! ((! PCVMode) & (Y PCVMode))) S ((! ((! PCVMode) & (Y PCVMode))) & (PCVMode & (Z (! PCVMode))))) -> (((Y (RMButton & ((Y (! RMButton)) | (PCVMode & (Z (! PCVMode)))))) -> (RM | (PCVMode & (Z (! PCVMode))))) S (((Y (RMButton & ((Y (! RMButton)) | (PCVMode & (Z (! PCVMode)))))) -> (RM | (PCVMode & (Z (! PCVMode))))) & (PCVMode & (Z (! PCVMode)))))));
FUN.23;The system shall provide means to switch from PCV to PSV while PCV ventilation is active.;in PCVMode when PSVModeSelected System shall at the next timepoint satisfy ventilating & PSVMode;((H (((! PCVMode) & (Y PCVMode)) -> (Y (((Y (PSVModeSelected & ((Y (! PSVModeSelected)) | (PCVMode & (Z (! PCVMode)))))) -> ((ventilating & PSVMode) | (PCVMode & (Z (! PCVMode))))) S (((Y (PSVModeSelected & ((Y (! PSVModeSelected)) | (PCVMode & (Z (! PCVMode)))))) -> ((ventilating & PSVMode) | (PCVMode & (Z (! PCVMode))))) & (PCVMode & (Z (! PCVMode)))))))) & (((! ((! PCVMode) & (Y PCVMode))) S ((! ((! PCVMode) & (Y PCVMode))) & (PCVMode & (Z (! PCVMode))))) -> (((Y (PSVModeSelected & ((Y (! PSVModeSelected)) | (PCVMode & (Z (! PCVMode)))))) -> ((ventilating & PSVMode) | (PCVMode & (Z (! PCVMode))))) S (((Y (PSVModeSelected & ((Y (! PSVModeSelected)) | (PCVMode & (Z (! PCVMode)))))) -> ((ventilating & PSVMode) | (PCVMode & (Z (! PCVMode))))) & (PCVMode & (Z (! PCVMode)))))));
FUN.23.1;When a PCV-to-PSV switch is initiated by the user the system shall ask the user for confirmation/setting of PSV parameters to be used;in PCVMode when PSVModeSelected System shall eventually satisfy confirmPSVParameters;((H (((! PCVMode) & (Y PCVMode)) -> (Y (((! PSVModeSelected) S ((! PSVModeSelected) & (PCVMode & (Z (! PCVMode))))) | (! ((! confirmPSVParameters) S ((! confirmPSVParameters) & (PSVModeSelected & ((Y (! PSVModeSelected)) | (PCVMode & (Z (! PCVMode)))))))))))) & (((! ((! PCVMode) & (Y PCVMode))) S ((! ((! PCVMode) & (Y PCVMode))) & (PCVMode & (Z (! PCVMode))))) -> (((! PSVModeSelected) S ((! PSVModeSelected) & (PCVMode & (Z (! PCVMode))))) | (! ((! confirmPSVParameters) S ((! confirmPSVParameters) & (PSVModeSelected & ((Y (! PSVModeSelected)) | (PCVMode & (Z (! PCVMode)))))))))));
FUN.23.2;The switch to PSV shall occur only after the PSV parameters have been confirmed and until that has happened the PCV ventilation shall continue;in PCVMode System shall always satisfy ((confirmPSVParameters & PSVMode) | !(confirmPSVParameters & PCVMode)) & ventilating;(H (PCVMode -> (((confirmPSVParameters & PSVMode) | (! (confirmPSVParameters & PCVMode))) & ventilating)));
FUN.23.3;The switch to PSV shall occur at the end of a PCV inspiratory time;in PCVMode when PSVModeSelected System shall at the next timepoint satisfy !(PCVInspTimeEnd & PSVMode);((H (((! PCVMode) & (Y PCVMode)) -> (Y (((Y (PSVModeSelected & ((Y (! PSVModeSelected)) | (PCVMode & (Z (! PCVMode)))))) -> ((! (PCVInspTimeEnd & PSVMode)) | (PCVMode & (Z (! PCVMode))))) S (((Y (PSVModeSelected & ((Y (! PSVModeSelected)) | (PCVMode & (Z (! PCVMode)))))) -> ((! (PCVInspTimeEnd & PSVMode)) | (PCVMode & (Z (! PCVMode))))) & (PCVMode & (Z (! PCVMode)))))))) & (((! ((! PCVMode) & (Y PCVMode))) S ((! ((! PCVMode) & (Y PCVMode))) & (PCVMode & (Z (! PCVMode))))) -> (((Y (PSVModeSelected & ((Y (! PSVModeSelected)) | (PCVMode & (Z (! PCVMode)))))) -> ((! (PCVInspTimeEnd & PSVMode)) | (PCVMode & (Z (! PCVMode))))) S (((Y (PSVModeSelected & ((Y (! PSVModeSelected)) | (PCVMode & (Z (! PCVMode)))))) -> ((! (PCVInspTimeEnd & PSVMode)) | (PCVMode & (Z (! PCVMode))))) & (PCVMode & (Z (! PCVMode)))))));
FUN.25;In PSV mode the breathing cycle shall be initiated by a sudden drop in pressure above a user-settable threshold (Inhale Trigger Sensitivity);in PSVMode when inspiratoryPressure < InhaleTriggerSensitivityPSV System shall at the next timepoint satisfy breathingCycleStart;((H (((! PSVMode) & (Y PSVMode)) -> (Y (((Y ((inspiratoryPressure < InhaleTriggerSensitivityPSV) & ((Y (! (inspiratoryPressure < InhaleTriggerSensitivityPSV))) | (PSVMode & (Z (! PSVMode)))))) -> (breathingCycleStart | (PSVMode & (Z (! PSVMode))))) S (((Y ((inspiratoryPressure < InhaleTriggerSensitivityPSV) & ((Y (! (inspiratoryPressure < InhaleTriggerSensitivityPSV))) | (PSVMode & (Z (! PSVMode)))))) -> (breathingCycleStart | (PSVMode & (Z (! PSVMode))))) & (PSVMode & (Z (! PSVMode)))))))) & (((! ((! PSVMode) & (Y PSVMode))) S ((! ((! PSVMode) & (Y PSVMode))) & (PSVMode & (Z (! PSVMode))))) -> (((Y ((inspiratoryPressure < InhaleTriggerSensitivityPSV) & ((Y (! (inspiratoryPressure < InhaleTriggerSensitivityPSV))) | (PSVMode & (Z (! PSVMode)))))) -> (breathingCycleStart | (PSVMode & (Z (! PSVMode))))) S (((Y ((inspiratoryPressure < InhaleTriggerSensitivityPSV) & ((Y (! (inspiratoryPressure < InhaleTriggerSensitivityPSV))) | (PSVMode & (Z (! PSVMode)))))) -> (breathingCycleStart | (PSVMode & (Z (! PSVMode))))) & (PSVMode & (Z (! PSVMode)))))));
FUN.26;In PSV mode the expiration phase shall start when the inspiratory flow drops below a setable fraction of the peak flow (Expiratory Trigger Setting);in PSVMode when F11 < ExpiratoryTriggerSensitivity System shall at the next timepoint satisfy expirationPhaseStart;((H (((! PSVMode) & (Y PSVMode)) -> (Y (((Y ((F11 < ExpiratoryTriggerSensitivity) & ((Y (! (F11 < ExpiratoryTriggerSensitivity))) | (PSVMode & (Z (! PSVMode)))))) -> (expirationPhaseStart | (PSVMode & (Z (! PSVMode))))) S (((Y ((F11 < ExpiratoryTriggerSensitivity) & ((Y (! (F11 < ExpiratoryTriggerSensitivity))) | (PSVMode & (Z (! PSVMode)))))) -> (expirationPhaseStart | (PSVMode & (Z (! PSVMode))))) & (PSVMode & (Z (! PSVMode)))))))) & (((! ((! PSVMode) & (Y PSVMode))) S ((! ((! PSVMode) & (Y PSVMode))) & (PSVMode & (Z (! PSVMode))))) -> (((Y ((F11 < ExpiratoryTriggerSensitivity) & ((Y (! (F11 < ExpiratoryTriggerSensitivity))) | (PSVMode & (Z (! PSVMode)))))) -> (expirationPhaseStart | (PSVMode & (Z (! PSVMode))))) S (((Y ((F11 < ExpiratoryTriggerSensitivity) & ((Y (! (F11 < ExpiratoryTriggerSensitivity))) | (PSVMode & (Z (! PSVMode)))))) -> (expirationPhaseStart | (PSVMode & (Z (! PSVMode))))) & (PSVMode & (Z (! PSVMode)))))));
FUN.27;In PSV mode the system shall check for the presence of apnea, which occurs when a patient does not take new breath within the allowable apnea lag time.;in PSVMode when breathingTime >= apneaLagTime System shall at the next timepoint satisfy apnea;((H (((! PSVMode) & (Y PSVMode)) -> (Y (((Y ((breathingTime >= apneaLagTime) & ((Y (! (breathingTime >= apneaLagTime))) | (PSVMode & (Z (! PSVMode)))))) -> (apnea | (PSVMode & (Z (! PSVMode))))) S (((Y ((breathingTime >= apneaLagTime) & ((Y (! (breathingTime >= apneaLagTime))) | (PSVMode & (Z (! PSVMode)))))) -> (apnea | (PSVMode & (Z (! PSVMode))))) & (PSVMode & (Z (! PSVMode)))))))) & (((! ((! PSVMode) & (Y PSVMode))) S ((! ((! PSVMode) & (Y PSVMode))) & (PSVMode & (Z (! PSVMode))))) -> (((Y ((breathingTime >= apneaLagTime) & ((Y (! (breathingTime >= apneaLagTime))) | (PSVMode & (Z (! PSVMode)))))) -> (apnea | (PSVMode & (Z (! PSVMode))))) S (((Y ((breathingTime >= apneaLagTime) & ((Y (! (breathingTime >= apneaLagTime))) | (PSVMode & (Z (! PSVMode)))))) -> (apnea | (PSVMode & (Z (! PSVMode))))) & (PSVMode & (Z (! PSVMode)))))));
FUN.27.1;If apnea is detected, an apnea alarm shall be triggered.;if apnea System shall at the next timepoint satisfy apneaAlarm;(H ((Y (apnea & (Z (! apnea)))) -> (apneaAlarm | (! (Y TRUE)))));
FUN.27.2;If apnea is detected, the system shall automatically switch from PSV to PCV mode with pre-determined apnea backup settings for RRAP , Pinsp AP , I:EAP . RRAP and Pinsp AP shall be set by the user. I:EAP will be fixed at 1:2;if apnea System shall at the next timepoint satisfy PCVMode & RR = RR_AP & P_insp = P_inspAP & ItoE = ItoE_AP;(H ((Y (apnea & (Z (! apnea)))) -> ((((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP)) | (! (Y TRUE)))));
FUN.28;In PCV and PSV mode there shall be the possibility to press a single button to initiate an Expiratory Pause that closes both inspiratory and expiratory valve at the end of the expiration phase as long as the operator holds the button but no longer than 60 sec;when expiratoryPauseButton & (ExpiratoryPhaseEnd) System shall until buttonUnPressOr60Seconds satisfy expirationPhaseEnd & inValveClose & outValveClose;(H ((H (! (expiratoryPauseButton & ExpiratoryPhaseEnd))) | (((! buttonUnPressOr60Seconds) S ((! buttonUnPressOr60Seconds) & ((expiratoryPauseButton & ExpiratoryPhaseEnd) & (Z (! (expiratoryPauseButton & ExpiratoryPhaseEnd)))))) -> ((expirationPhaseEnd & inValveClose) & outValveClose))));
FUN.29;In PCV and PSV mode there shall be the possibility to press a single button to initiate an Inspiratory Pause (IP) that closes both inspiratory and expiratory valve at the end of the inspiratory phase as long as the operator holds the button but no longer than 40 sec;while inspiratoryPauseButton when (inspiratoryPhaseEnd) System shall for 40 seconds satisfy (inspiratoryPauseButton => inValveClose & outValveClose);((H (((! inspiratoryPauseButton) & (Y inspiratoryPauseButton)) -> (Y (((O[0,40] (inspiratoryPhaseEnd & ((Y (! inspiratoryPhaseEnd)) | (inspiratoryPauseButton & (Z (! inspiratoryPauseButton)))))) -> (((! inspiratoryPhaseEnd) S ((! inspiratoryPhaseEnd) & (inspiratoryPauseButton & (Z (! inspiratoryPauseButton))))) | (inspiratoryPauseButton -> (inValveClose & outValveClose)))) S (((O[0,40] (inspiratoryPhaseEnd & ((Y (! inspiratoryPhaseEnd)) | (inspiratoryPauseButton & (Z (! inspiratoryPauseButton)))))) -> (((! inspiratoryPhaseEnd) S ((! inspiratoryPhaseEnd) & (inspiratoryPauseButton & (Z (! inspiratoryPauseButton))))) | (inspiratoryPauseButton -> (inValveClose & outValveClose)))) & (inspiratoryPauseButton & (Z (! inspiratoryPauseButton)))))))) & (((! ((! inspiratoryPauseButton) & (Y inspiratoryPauseButton))) S ((! ((! inspiratoryPauseButton) & (Y inspiratoryPauseButton))) & (inspiratoryPauseButton & (Z (! inspiratoryPauseButton))))) -> (((O[0,40] (inspiratoryPhaseEnd & ((Y (! inspiratoryPhaseEnd)) | (inspiratoryPauseButton & (Z (! inspiratoryPauseButton)))))) -> (((! inspiratoryPhaseEnd) S ((! inspiratoryPhaseEnd) & (inspiratoryPauseButton & (Z (! inspiratoryPauseButton))))) | (inspiratoryPauseButton -> (inValveClose & outValveClose)))) S (((O[0,40] (inspiratoryPhaseEnd & ((Y (! inspiratoryPhaseEnd)) | (inspiratoryPauseButton & (Z (! inspiratoryPauseButton)))))) -> (((! inspiratoryPhaseEnd) S ((! inspiratoryPhaseEnd) & (inspiratoryPauseButton & (Z (! inspiratoryPauseButton))))) | (inspiratoryPauseButton -> (inValveClose & outValveClose)))) & (inspiratoryPauseButton & (Z (! inspiratoryPauseButton)))))));
FUN.30;The high-level operation sequence shall follow the scheme shown in Figure 2.1;System shall always satisfy if StartUpMode then (if newPatient then SelfTestMode & if !newPatient then StandbyMode) & if SelfTestMode then (if selfTestPassed then StandbyMode) & if StandbyMode then (if startPCV then PCVMode & if startPSV then PSVMode & if runSelfTest then SelfTestMode) & if error then FailSafeMode & if powerOff then off;(H (StartUpMode -> (((newPatient -> ((SelfTestMode & (! newPatient)) -> StandbyMode)) & SelfTestMode) -> (((selfTestPassed -> StandbyMode) & StandbyMode) -> (((startPCV -> ((PCVMode & startPSV) -> ((PSVMode & runSelfTest) -> SelfTestMode))) & error) -> ((FailSafeMode & powerOff) -> off))))));
FUN.31;Any normal operating mode or identified failure mode of the system and its components shall always result in a state of the system that is safe for the patient.;System shall always satisfy patientSafe;(H patientSafe);
FUN.32;In a worst-case failure, the controller shall leave the system in a state that allows the patient to inhale and exhale unimpeded.;in FailSafeMode System shall always satisfy patientSafe;(H (FailSafeMode -> patientSafe));
FUN.33;Any power failure shall leave the system in a state that allows the patient to inhale and exhale unimpeded.;if powerFailure System shall at the next timepoint satisfy patientSafe;(H ((Y (powerFailure & (Z (! powerFailure)))) -> (patientSafe | (! (Y TRUE)))));
FUN.34;Any failure of the gas supply shall leave the system in a state that allows the patient to inhale and exhale unimpeded.;if gasSupplyFailure System shall at the next timepoint satisfy patientSafe;(H ((Y (gasSupplyFailure & (Z (! gasSupplyFailure)))) -> (patientSafe | (! (Y TRUE)))));
FUN.37;The system shall have an internal power source that allows operation for 120 minutes past the failure of the external power source.;if powerFailure System shall for 120 minutes satisfy !off;(H ((O[0,120] (powerFailure & (Z (! powerFailure)))) -> ((H (! powerFailure)) | (! off))));
FUN.38.1;The system shall raise an alarm when a parameter value goes outside the range defined for its associated alarm.;if param_V > paramMax_V | param_V < paramMin_V System shall at the next timepoint satisfy paramAlarm_V;(H ((Y (((param_V > paramMax_V) | (param_V < paramMin_V)) & (Z (! ((param_V > paramMax_V) | (param_V < paramMin_V)))))) -> (paramAlarm_V | (! (Y TRUE)))));
FUN.39;The system shall prompt the user before ventilation is started to enter user-controlled alarm thresholds for SAV.3- SAV.9;before PSVMode | PCVMode System shall eventually satisfy enterAlarmThresholds;((H (((((PSVMode | PCVMode) & (Z (! (PSVMode | PCVMode)))) & (Z (H (! (PSVMode | PCVMode))))) & (Y TRUE)) -> (Y (O enterAlarmThresholds)))) & ((H (! (((PSVMode | PCVMode) & (Z (! (PSVMode | PCVMode)))) & (Z (H (! (PSVMode | PCVMode))))))) -> (O enterAlarmThresholds)));
FUN.40;The system shall react to the inspiratory airway pressure at the patient being exceeded (Max Pinsp alarm SAV.4) (e.g. by coughing) by truncating the inspiratory phase and immediately transitioning to expiration, quickly relieving the pressure.;if P_insp > MaxP_insp System shall at the next timepoint satisfy inspiratoryPhaseEnd & expirationPhaseStart;(H ((Y ((P_insp > MaxP_insp) & (Z (! (P_insp > MaxP_insp))))) -> ((inspiratoryPhaseEnd & expirationPhaseStart) | (! (Y TRUE)))));
FUN.41;A failure of the GUI (e.g. GUI freezes) or a loss of communication between the GUI and the Controller shall raise a high-priority alarm and any ongoing ventilation process shall not be interrupted.;if GUIFailure | !GUIConnected System shall at the next timepoint satisfy ventilating & highPriorityAlarm;(H ((Y ((GUIFailure | (! GUIConnected)) & (Z (! (GUIFailure | (! GUIConnected)))))) -> ((ventilating & highPriorityAlarm) | (! (Y TRUE)))));
CONT.1;The controller shall implement the following modes (see Figure 4.1):;Controller shall always satisfy StartUpMode | SelfTestMode | StandbyMode | PCVMode | PSVMode | FailSafeMode;CONT20: (H (PCVMode -> ((breathingCycleTime = (1 / RR_PCV)) & (ExpiratoryTime = (breathingCycleTime / (1 + ItoE_PCV))))));
CONT.1.1;Start-up Mode: In start-up mode the controller initializes itself with default configuration parameters (if any), checks the system memory and the communication of the controller with the sensors and valves, as well as between the controller and the GUI. Start-up mode is completed once the required activities have been completed.;in StartUpMode Controller shall eventually satisfy initStart & (initDone | (initFail & OutOfServiceWarning & FailSafeMode));((H (((! StartUpMode) & (Y StartUpMode)) -> (Y (! ((! (initStart & (initDone | ((initFail & OutOfServiceWarning) & FailSafeMode)))) S ((! (initStart & (initDone | ((initFail & OutOfServiceWarning) & FailSafeMode)))) & (StartUpMode & (Z (! StartUpMode))))))))) & (((! ((! StartUpMode) & (Y StartUpMode))) S ((! ((! StartUpMode) & (Y StartUpMode))) & (StartUpMode & (Z (! StartUpMode))))) -> (! ((! (initStart & (initDone | ((initFail & OutOfServiceWarning) & FailSafeMode)))) S ((! (initStart & (initDone | ((initFail & OutOfServiceWarning) & FailSafeMode)))) & (StartUpMode & (Z (! StartUpMode))))))));
CONT.1.3;VentilationOff: In ventilation off, the machine does not ventilate, the in valve is closed and the out valve is opened.;in StandbyMode Controller shall always satisfy ventilationOff & inValveClose & outValveOpen;(H (StandbyMode -> ((ventilationOff & inValveClose) & outValveOpen)));
CONT.1.6;Fail-safe: the controller forces input and output valves to their de-energized states (in valve close and out valve open);in FailSafeMode Controller shall always satisfy inValveClose & outValveOpen;(H (FailSafeMode -> (inValveClose & outValveOpen)));
CONT.2;The transition to Start-up Mode shall be allowed by pushing the power button located on the back side of the ventilator unit to turn it on.;if powerOff & !powerButton Controller shall always satisfy !StartUpMode;(H ((H (! (powerOff & (! powerButton)))) | (! StartUpMode)));
CONT.3;The transition from Start-up Mode to Self test Mode shall occur once the configurations have been loaded and the internal checking is terminated.;in StartUpMode when initDone Controller shall at the next timepoint satisfy SelfTestMode;((H (((! StartUpMode) & (Y StartUpMode)) -> (Y (((Y (initDone & ((Y (! initDone)) | (StartUpMode & (Z (! StartUpMode)))))) -> (SelfTestMode | (StartUpMode & (Z (! StartUpMode))))) S (((Y (initDone & ((Y (! initDone)) | (StartUpMode & (Z (! StartUpMode)))))) -> (SelfTestMode | (StartUpMode & (Z (! StartUpMode))))) & (StartUpMode & (Z (! StartUpMode)))))))) & (((! ((! StartUpMode) & (Y StartUpMode))) S ((! ((! StartUpMode) & (Y StartUpMode))) & (StartUpMode & (Z (! StartUpMode))))) -> (((Y (initDone & ((Y (! initDone)) | (StartUpMode & (Z (! StartUpMode)))))) -> (SelfTestMode | (StartUpMode & (Z (! StartUpMode))))) S (((Y (initDone & ((Y (! initDone)) | (StartUpMode & (Z (! StartUpMode)))))) -> (SelfTestMode | (StartUpMode & (Z (! StartUpMode))))) & (StartUpMode & (Z (! StartUpMode)))))));
CONT.4;The transition from Self-Test Mode to VentilationOff Mode shall occur:;in SelfTestMode if selfTestPassed | GUIResumeRequest Controller shall at the next timepoint satisfy StandbyMode;((H (((! SelfTestMode) & (Y SelfTestMode)) -> (Y (((Y ((selfTestPassed | GUIResumeRequest) & ((Y (! (selfTestPassed | GUIResumeRequest))) | (SelfTestMode & (Z (! SelfTestMode)))))) -> (StandbyMode | (SelfTestMode & (Z (! SelfTestMode))))) S (((Y ((selfTestPassed | GUIResumeRequest) & ((Y (! (selfTestPassed | GUIResumeRequest))) | (SelfTestMode & (Z (! SelfTestMode)))))) -> (StandbyMode | (SelfTestMode & (Z (! SelfTestMode))))) & (SelfTestMode & (Z (! SelfTestMode)))))))) & (((! ((! SelfTestMode) & (Y SelfTestMode))) S ((! ((! SelfTestMode) & (Y SelfTestMode))) & (SelfTestMode & (Z (! SelfTestMode))))) -> (((Y ((selfTestPassed | GUIResumeRequest) & ((Y (! (selfTestPassed | GUIResumeRequest))) | (SelfTestMode & (Z (! SelfTestMode)))))) -> (StandbyMode | (SelfTestMode & (Z (! SelfTestMode))))) S (((Y ((selfTestPassed | GUIResumeRequest) & ((Y (! (selfTestPassed | GUIResumeRequest))) | (SelfTestMode & (Z (! SelfTestMode)))))) -> (StandbyMode | (SelfTestMode & (Z (! SelfTestMode))))) & (SelfTestMode & (Z (! SelfTestMode)))))));
CONT.5;The transition from VentilationOff to PSV shall occur if the change mode command is received from the GUI.;in StandbyMode if PSVModeSelected Controller shall at the next timepoint satisfy PSVMode;((H (((! StandbyMode) & (Y StandbyMode)) -> (Y (((Y (PSVModeSelected & ((Y (! PSVModeSelected)) | (StandbyMode & (Z (! StandbyMode)))))) -> (PSVMode | (StandbyMode & (Z (! StandbyMode))))) S (((Y (PSVModeSelected & ((Y (! PSVModeSelected)) | (StandbyMode & (Z (! StandbyMode)))))) -> (PSVMode | (StandbyMode & (Z (! StandbyMode))))) & (StandbyMode & (Z (! StandbyMode)))))))) & (((! ((! StandbyMode) & (Y StandbyMode))) S ((! ((! StandbyMode) & (Y StandbyMode))) & (StandbyMode & (Z (! StandbyMode))))) -> (((Y (PSVModeSelected & ((Y (! PSVModeSelected)) | (StandbyMode & (Z (! StandbyMode)))))) -> (PSVMode | (StandbyMode & (Z (! StandbyMode))))) S (((Y (PSVModeSelected & ((Y (! PSVModeSelected)) | (StandbyMode & (Z (! StandbyMode)))))) -> (PSVMode | (StandbyMode & (Z (! StandbyMode))))) & (StandbyMode & (Z (! StandbyMode)))))));
CONT.6;The transition from VentilationOff to PCV mode shall occur if the change mode command is received from the GUI.;in StandbyMode if PCVModeSelected Controller shall at the next timepoint satisfy PCVMode;((H (((! StandbyMode) & (Y StandbyMode)) -> (Y (((Y (PCVModeSelected & ((Y (! PCVModeSelected)) | (StandbyMode & (Z (! StandbyMode)))))) -> (PCVMode | (StandbyMode & (Z (! StandbyMode))))) S (((Y (PCVModeSelected & ((Y (! PCVModeSelected)) | (StandbyMode & (Z (! StandbyMode)))))) -> (PCVMode | (StandbyMode & (Z (! StandbyMode))))) & (StandbyMode & (Z (! StandbyMode)))))))) & (((! ((! StandbyMode) & (Y StandbyMode))) S ((! ((! StandbyMode) & (Y StandbyMode))) & (StandbyMode & (Z (! StandbyMode))))) -> (((Y (PCVModeSelected & ((Y (! PCVModeSelected)) | (StandbyMode & (Z (! StandbyMode)))))) -> (PCVMode | (StandbyMode & (Z (! StandbyMode))))) S (((Y (PCVModeSelected & ((Y (! PCVModeSelected)) | (StandbyMode & (Z (! StandbyMode)))))) -> (PCVMode | (StandbyMode & (Z (! StandbyMode))))) & (StandbyMode & (Z (! StandbyMode)))))));
CONT.7;The transition from PCV to PSV shall occur if ventilation is on, the transition from PCV to PSV shall occur at the end of a PCV inspiratory time if the change mode command has been received from the GUI.;in PCVMode if inspiratoryPhaseEnd & PSVModeSelected Controller shall at the next timepoint satisfy ventilating & PSVMode;((H (((! PCVMode) & (Y PCVMode)) -> (Y (((Y ((inspiratoryPhaseEnd & PSVModeSelected) & ((Y (! (inspiratoryPhaseEnd & PSVModeSelected))) | (PCVMode & (Z (! PCVMode)))))) -> ((ventilating & PSVMode) | (PCVMode & (Z (! PCVMode))))) S (((Y ((inspiratoryPhaseEnd & PSVModeSelected) & ((Y (! (inspiratoryPhaseEnd & PSVModeSelected))) | (PCVMode & (Z (! PCVMode)))))) -> ((ventilating & PSVMode) | (PCVMode & (Z (! PCVMode))))) & (PCVMode & (Z (! PCVMode)))))))) & (((! ((! PCVMode) & (Y PCVMode))) S ((! ((! PCVMode) & (Y PCVMode))) & (PCVMode & (Z (! PCVMode))))) -> (((Y ((inspiratoryPhaseEnd & PSVModeSelected) & ((Y (! (inspiratoryPhaseEnd & PSVModeSelected))) | (PCVMode & (Z (! PCVMode)))))) -> ((ventilating & PSVMode) | (PCVMode & (Z (! PCVMode))))) S (((Y ((inspiratoryPhaseEnd & PSVModeSelected) & ((Y (! (inspiratoryPhaseEnd & PSVModeSelected))) | (PCVMode & (Z (! PCVMode)))))) -> ((ventilating & PSVMode) | (PCVMode & (Z (! PCVMode))))) & (PCVMode & (Z (! PCVMode)))))));
CONT.8;The transition from PCV to VentilationOff shall occur if the user stops the ventilation in PCV mode.;in PCVMode if stopVentilation Controller shall at the next timepoint satisfy StandbyMode;((H (((! PCVMode) & (Y PCVMode)) -> (Y (((Y (stopVentilation & ((Y (! stopVentilation)) | (PCVMode & (Z (! PCVMode)))))) -> (StandbyMode | (PCVMode & (Z (! PCVMode))))) S (((Y (stopVentilation & ((Y (! stopVentilation)) | (PCVMode & (Z (! PCVMode)))))) -> (StandbyMode | (PCVMode & (Z (! PCVMode))))) & (PCVMode & (Z (! PCVMode)))))))) & (((! ((! PCVMode) & (Y PCVMode))) S ((! ((! PCVMode) & (Y PCVMode))) & (PCVMode & (Z (! PCVMode))))) -> (((Y (stopVentilation & ((Y (! stopVentilation)) | (PCVMode & (Z (! PCVMode)))))) -> (StandbyMode | (PCVMode & (Z (! PCVMode))))) S (((Y (stopVentilation & ((Y (! stopVentilation)) | (PCVMode & (Z (! PCVMode)))))) -> (StandbyMode | (PCVMode & (Z (! PCVMode))))) & (PCVMode & (Z (! PCVMode)))))));
CONT.9;The transition from PSV to PCV shall occur if the patient does not trigger a breath within the time of the apnea trigger window. The switch shall occur with respiratory rate, target inspiratory pressure and I:E defined for the apnea backup mode.;in PSVMode when breathingTime >= apneaLagTime Controller shall at the next timepoint satisfy PCVMode & RR = RR_AP & P_insp = P_inspAP & IToE = IToE_AP;((H (((! PSVMode) & (Y PSVMode)) -> (Y (((Y ((breathingTime >= apneaLagTime) & ((Y (! (breathingTime >= apneaLagTime))) | (PSVMode & (Z (! PSVMode)))))) -> ((((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (IToE = IToE_AP)) | (PSVMode & (Z (! PSVMode))))) S (((Y ((breathingTime >= apneaLagTime) & ((Y (! (breathingTime >= apneaLagTime))) | (PSVMode & (Z (! PSVMode)))))) -> ((((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (IToE = IToE_AP)) | (PSVMode & (Z (! PSVMode))))) & (PSVMode & (Z (! PSVMode)))))))) & (((! ((! PSVMode) & (Y PSVMode))) S ((! ((! PSVMode) & (Y PSVMode))) & (PSVMode & (Z (! PSVMode))))) -> (((Y ((breathingTime >= apneaLagTime) & ((Y (! (breathingTime >= apneaLagTime))) | (PSVMode & (Z (! PSVMode)))))) -> ((((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (IToE = IToE_AP)) | (PSVMode & (Z (! PSVMode))))) S (((Y ((breathingTime >= apneaLagTime) & ((Y (! (breathingTime >= apneaLagTime))) | (PSVMode & (Z (! PSVMode)))))) -> ((((PCVMode & (RR = RR_AP)) & (P_insp = P_inspAP)) & (IToE = IToE_AP)) | (PSVMode & (Z (! PSVMode))))) & (PSVMode & (Z (! PSVMode)))))));
CONT.10;The transition from PSV to VentilationOff shall occur if the user stops the ventilation in PSV mode.;in PSVMode if stopVentilation Controller shall at the next timepoint satisfy StandbyMode;((H (((! PSVMode) & (Y PSVMode)) -> (Y (((Y (stopVentilation & ((Y (! stopVentilation)) | (PSVMode & (Z (! PSVMode)))))) -> (StandbyMode | (PSVMode & (Z (! PSVMode))))) S (((Y (stopVentilation & ((Y (! stopVentilation)) | (PSVMode & (Z (! PSVMode)))))) -> (StandbyMode | (PSVMode & (Z (! PSVMode))))) & (PSVMode & (Z (! PSVMode)))))))) & (((! ((! PSVMode) & (Y PSVMode))) S ((! ((! PSVMode) & (Y PSVMode))) & (PSVMode & (Z (! PSVMode))))) -> (((Y (stopVentilation & ((Y (! stopVentilation)) | (PSVMode & (Z (! PSVMode)))))) -> (StandbyMode | (PSVMode & (Z (! PSVMode))))) S (((Y (stopVentilation & ((Y (! stopVentilation)) | (PSVMode & (Z (! PSVMode)))))) -> (StandbyMode | (PSVMode & (Z (! PSVMode))))) & (PSVMode & (Z (! PSVMode)))))));
CONT.46;The controller cannot return from fail-safe mode to any other mode without a power cycle (turn off and then turn on the machine).;after FailSafeMode Controller shall until off satisfy !(StartUpMode | SelfTestMode | StandbyMode | PCVMode | PSVMode);((O (((! FailSafeMode) & (Y FailSafeMode)) & (Y (H (! ((! FailSafeMode) & (Y FailSafeMode))))))) -> ((((! off) S ((! off) & (((! FailSafeMode) & (Y FailSafeMode)) & (Y (H (! ((! FailSafeMode) & (Y FailSafeMode)))))))) -> (! ((((StartUpMode | SelfTestMode) | StandbyMode) | PCVMode) | PSVMode))) S ((((! off) S ((! off) & (((! FailSafeMode) & (Y FailSafeMode)) & (Y (H (! ((! FailSafeMode) & (Y FailSafeMode)))))))) -> (! ((((StartUpMode | SelfTestMode) | StandbyMode) | PCVMode) | PSVMode))) & (((! FailSafeMode) & (Y FailSafeMode)) & (Y (H (! ((! FailSafeMode) & (Y FailSafeMode)))))))));
CONT.11;Final State shall be reached by pushing the power button located on the back side of the ventilator unit to turn it off.;if powerOff Controller shall at the next timepoint satisfy FinalState;(H ((Y (powerOff & (Z (! powerOff)))) -> (FinalState | (! (Y TRUE)))));
CONT.11.1;During Final state, all parameters (if any) are to be safely stored before the final state is complete and the unit is de-energized.;in FinalState Controller shall eventually satisfy parametersStored & off;((H (((! FinalState) & (Y FinalState)) -> (Y (! ((! (parametersStored & off)) S ((! (parametersStored & off)) & (FinalState & (Z (! FinalState))))))))) & (((! ((! FinalState) & (Y FinalState))) S ((! ((! FinalState) & (Y FinalState))) & (FinalState & (Z (! FinalState))))) -> (! ((! (parametersStored & off)) S ((! (parametersStored & off)) & (FinalState & (Z (! FinalState))))))));
CONT.12;A set of default values for all parameters shall be provided and loaded from a configuration file on the machine when it is turned on. The parameters are listed in Section 3.1.1.;in StartUpMode Controller shall eventually satisfy defaultParamsLoaded;((H (((! StartUpMode) & (Y StartUpMode)) -> (Y (! ((! defaultParamsLoaded) S ((! defaultParamsLoaded) & (StartUpMode & (Z (! StartUpMode))))))))) & (((! ((! StartUpMode) & (Y StartUpMode))) S ((! ((! StartUpMode) & (Y StartUpMode))) & (StartUpMode & (Z (! StartUpMode))))) -> (! ((! defaultParamsLoaded) S ((! defaultParamsLoaded) & (StartUpMode & (Z (! StartUpMode))))))));
CONT.13;The controller shall check the communication of the controller with the sensors and valves.;in StartUpMode Controller shall eventually satisfy checkCommsSensors & checkCommsValves;((H (((! StartUpMode) & (Y StartUpMode)) -> (Y (! ((! (checkCommsSensors & checkCommsValves)) S ((! (checkCommsSensors & checkCommsValves)) & (StartUpMode & (Z (! StartUpMode))))))))) & (((! ((! StartUpMode) & (Y StartUpMode))) S ((! ((! StartUpMode) & (Y StartUpMode))) & (StartUpMode & (Z (! StartUpMode))))) -> (! ((! (checkCommsSensors & checkCommsValves)) S ((! (checkCommsSensors & checkCommsValves)) & (StartUpMode & (Z (! StartUpMode))))))));
CONT.14;The controller shall check the communication of the controller with GUI.;in StartUpMode Controller shall eventually satisfy checkCommsGUI;((H (((! StartUpMode) & (Y StartUpMode)) -> (Y (! ((! checkCommsGUI) S ((! checkCommsGUI) & (StartUpMode & (Z (! StartUpMode))))))))) & (((! ((! StartUpMode) & (Y StartUpMode))) S ((! ((! StartUpMode) & (Y StartUpMode))) & (StartUpMode & (Z (! StartUpMode))))) -> (! ((! checkCommsGUI) S ((! checkCommsGUI) & (StartUpMode & (Z (! StartUpMode))))))));
CONT.15;If the pressure sensor fails to connect or reports an error condition after a fixed number of retries (maximum 5), the controller shall transition to the fail-safe mode.;in StartUpMode if pressureSensorRetries >= 5 & (pressureSensorConnFailure | pressureSensorError) Controller shall at the next timepoint satisfy FailSafeMode;((H (((! StartUpMode) & (Y StartUpMode)) -> (Y (((Y (((pressureSensorRetries >= 5) & (pressureSensorConnFailure | pressureSensorError)) & ((Y (! ((pressureSensorRetries >= 5) & (pressureSensorConnFailure | pressureSensorError)))) | (StartUpMode & (Z (! StartUpMode)))))) -> (FailSafeMode | (StartUpMode & (Z (! StartUpMode))))) S (((Y (((pressureSensorRetries >= 5) & (pressureSensorConnFailure | pressureSensorError)) & ((Y (! ((pressureSensorRetries >= 5) & (pressureSensorConnFailure | pressureSensorError)))) | (StartUpMode & (Z (! StartUpMode)))))) -> (FailSafeMode | (StartUpMode & (Z (! StartUpMode))))) & (StartUpMode & (Z (! StartUpMode)))))))) & (((! ((! StartUpMode) & (Y StartUpMode))) S ((! ((! StartUpMode) & (Y StartUpMode))) & (StartUpMode & (Z (! StartUpMode))))) -> (((Y (((pressureSensorRetries >= 5) & (pressureSensorConnFailure | pressureSensorError)) & ((Y (! ((pressureSensorRetries >= 5) & (pressureSensorConnFailure | pressureSensorError)))) | (StartUpMode & (Z (! StartUpMode)))))) -> (FailSafeMode | (StartUpMode & (Z (! StartUpMode))))) S (((Y (((pressureSensorRetries >= 5) & (pressureSensorConnFailure | pressureSensorError)) & ((Y (! ((pressureSensorRetries >= 5) & (pressureSensorConnFailure | pressureSensorError)))) | (StartUpMode & (Z (! StartUpMode)))))) -> (FailSafeMode | (StartUpMode & (Z (! StartUpMode))))) & (StartUpMode & (Z (! StartUpMode)))))));
CONT.16;If the external ADC fails to initialize or reports an error condition after a fixed number of retries (maximum 5), the controller shall transition to the fail-safe mode.;in StartUpMode if ADCRetries >= 5 & (ADCConnFailure | ADCError) Controller shall at the next timepoint satisfy FailSafeMode;((H (((! StartUpMode) & (Y StartUpMode)) -> (Y (((Y (((ADCRetries >= 5) & (ADCConnFailure | ADCError)) & ((Y (! ((ADCRetries >= 5) & (ADCConnFailure | ADCError)))) | (StartUpMode & (Z (! StartUpMode)))))) -> (FailSafeMode | (StartUpMode & (Z (! StartUpMode))))) S (((Y (((ADCRetries >= 5) & (ADCConnFailure | ADCError)) & ((Y (! ((ADCRetries >= 5) & (ADCConnFailure | ADCError)))) | (StartUpMode & (Z (! StartUpMode)))))) -> (FailSafeMode | (StartUpMode & (Z (! StartUpMode))))) & (StartUpMode & (Z (! StartUpMode)))))))) & (((! ((! StartUpMode) & (Y StartUpMode))) S ((! ((! StartUpMode) & (Y StartUpMode))) & (StartUpMode & (Z (! StartUpMode))))) -> (((Y (((ADCRetries >= 5) & (ADCConnFailure | ADCError)) & ((Y (! ((ADCRetries >= 5) & (ADCConnFailure | ADCError)))) | (StartUpMode & (Z (! StartUpMode)))))) -> (FailSafeMode | (StartUpMode & (Z (! StartUpMode))))) S (((Y (((ADCRetries >= 5) & (ADCConnFailure | ADCError)) & ((Y (! ((ADCRetries >= 5) & (ADCConnFailure | ADCError)))) | (StartUpMode & (Z (! StartUpMode)))))) -> (FailSafeMode | (StartUpMode & (Z (! StartUpMode))))) & (StartUpMode & (Z (! StartUpMode)))))));
CONT.18;During the self test mode the controller shall perform the self-test specified in the FUN.6.;in SelfTestMode Controller shall eventually satisfy selfTestPassed | selfTestFailed;((H (((! SelfTestMode) & (Y SelfTestMode)) -> (Y (! ((! (selfTestPassed | selfTestFailed)) S ((! (selfTestPassed | selfTestFailed)) & (SelfTestMode & (Z (! SelfTestMode))))))))) & (((! ((! SelfTestMode) & (Y SelfTestMode))) S ((! ((! SelfTestMode) & (Y SelfTestMode))) & (SelfTestMode & (Z (! SelfTestMode))))) -> (! ((! (selfTestPassed | selfTestFailed)) S ((! (selfTestPassed | selfTestFailed)) & (SelfTestMode & (Z (! SelfTestMode))))))));
CONT.19;If the SelfTest fails, the controller shall not be able to proceed to ventilation.;in SelfTestMode if SelfTestFail Controller shall until off satisfy !StandbyMode & !ventilating;((H (((! SelfTestMode) & (Y SelfTestMode)) -> (Y ((((! SelfTestFail) S ((! SelfTestFail) & (SelfTestMode & (Z (! SelfTestMode))))) | (((! off) S ((! off) & (SelfTestFail & ((Y (! SelfTestFail)) | (SelfTestMode & (Z (! SelfTestMode))))))) -> ((! StandbyMode) & (! ventilating)))) S ((((! SelfTestFail) S ((! SelfTestFail) & (SelfTestMode & (Z (! SelfTestMode))))) | (((! off) S ((! off) & (SelfTestFail & ((Y (! SelfTestFail)) | (SelfTestMode & (Z (! SelfTestMode))))))) -> ((! StandbyMode) & (! ventilating)))) & (SelfTestMode & (Z (! SelfTestMode)))))))) & (((! ((! SelfTestMode) & (Y SelfTestMode))) S ((! ((! SelfTestMode) & (Y SelfTestMode))) & (SelfTestMode & (Z (! SelfTestMode))))) -> ((((! SelfTestFail) S ((! SelfTestFail) & (SelfTestMode & (Z (! SelfTestMode))))) | (((! off) S ((! off) & (SelfTestFail & ((Y (! SelfTestFail)) | (SelfTestMode & (Z (! SelfTestMode))))))) -> ((! StandbyMode) & (! ventilating)))) S ((((! SelfTestFail) S ((! SelfTestFail) & (SelfTestMode & (Z (! SelfTestMode))))) | (((! off) S ((! off) & (SelfTestFail & ((Y (! SelfTestFail)) | (SelfTestMode & (Z (! SelfTestMode))))))) -> ((! StandbyMode) & (! ventilating)))) & (SelfTestMode & (Z (! SelfTestMode)))))));
CONT.20;In PCV mode the breathing cycle shall be defined by inspiratory pressure Pinsp PCV relative to atmosphere, respiratory rate (RRPCV ) and the ratio between the inspiratory and expiratory times (I:EPCV ).;in PCVMode Controller shall always satisfy breathingCycleTime = 1/RR_PCV & ExpiratoryTime = breathingCycleTime / (1+ItoE_PCV);(H (PCVMode -> ((breathingCycleTime = (1 / RR_PCV)) & (ExpiratoryTime = (breathingCycleTime / (1 + ItoE_PCV))))));
CONT.21;The breath cycle shall start with the inspiration phase.;in PCVMode when BreathingCycleStart Controller shall at the next timepoint satisfy inspiratoryPhaseStart;((H (((! PCVMode) & (Y PCVMode)) -> (Y (((Y (BreathingCycleStart & ((Y (! BreathingCycleStart)) | (PCVMode & (Z (! PCVMode)))))) -> (inspiratoryPhaseStart | (PCVMode & (Z (! PCVMode))))) S (((Y (BreathingCycleStart & ((Y (! BreathingCycleStart)) | (PCVMode & (Z (! PCVMode)))))) -> (inspiratoryPhaseStart | (PCVMode & (Z (! PCVMode))))) & (PCVMode & (Z (! PCVMode)))))))) & (((! ((! PCVMode) & (Y PCVMode))) S ((! ((! PCVMode) & (Y PCVMode))) & (PCVMode & (Z (! PCVMode))))) -> (((Y (BreathingCycleStart & ((Y (! BreathingCycleStart)) | (PCVMode & (Z (! PCVMode)))))) -> (inspiratoryPhaseStart | (PCVMode & (Z (! PCVMode))))) S (((Y (BreathingCycleStart & ((Y (! BreathingCycleStart)) | (PCVMode & (Z (! PCVMode)))))) -> (inspiratoryPhaseStart | (PCVMode & (Z (! PCVMode))))) & (PCVMode & (Z (! PCVMode)))))));
CONT.22;The cycle starts with the inspiration phase that lasts an Inspiratory time I = 60 x I:EPCV /(RRPCV x (1 + I:EPCV )) seconds. After that the expiration phase begins.;in PCVMode Controller shall always satisfy inspiratoryTime = 60*(ItoE_PCV/(RR_PCV * (1 + ItoE_PCV)));(H (PCVMode -> (inspiratoryTime = (60 * (ItoE_PCV / (RR_PCV * (1 + ItoE_PCV)))))));
CONT.23;At the end of an inspiration phase, if the Inspiratory Pause is set by the GUI, an Inspiratory Pause shall start (see CONT.41).;while PCVMode & inspiratoryPauseButton when inspiratoryPhaseEnd Controller shall for 40 seconds satisfy (inspiratoryPauseButton => inValveClose & outValveClose);((H (((! (PCVMode & inspiratoryPauseButton)) & (Y (PCVMode & inspiratoryPauseButton))) -> (Y (((O[0,40] (inspiratoryPhaseEnd & ((Y (! inspiratoryPhaseEnd)) | ((PCVMode & inspiratoryPauseButton) & (Z (! (PCVMode & inspiratoryPauseButton))))))) -> (((! inspiratoryPhaseEnd) S ((! inspiratoryPhaseEnd) & ((PCVMode & inspiratoryPauseButton) & (Z (! (PCVMode & inspiratoryPauseButton)))))) | (inspiratoryPauseButton -> (inValveClose & outValveClose)))) S (((O[0,40] (inspiratoryPhaseEnd & ((Y (! inspiratoryPhaseEnd)) | ((PCVMode & inspiratoryPauseButton) & (Z (! (PCVMode & inspiratoryPauseButton))))))) -> (((! inspiratoryPhaseEnd) S ((! inspiratoryPhaseEnd) & ((PCVMode & inspiratoryPauseButton) & (Z (! (PCVMode & inspiratoryPauseButton)))))) | (inspiratoryPauseButton -> (inValveClose & outValveClose)))) & ((PCVMode & inspiratoryPauseButton) & (Z (! (PCVMode & inspiratoryPauseButton))))))))) & (((! ((! (PCVMode & inspiratoryPauseButton)) & (Y (PCVMode & inspiratoryPauseButton)))) S ((! ((! (PCVMode & inspiratoryPauseButton)) & (Y (PCVMode & inspiratoryPauseButton)))) & ((PCVMode & inspiratoryPauseButton) & (Z (! (PCVMode & inspiratoryPauseButton)))))) -> (((O[0,40] (inspiratoryPhaseEnd & ((Y (! inspiratoryPhaseEnd)) | ((PCVMode & inspiratoryPauseButton) & (Z (! (PCVMode & inspiratoryPauseButton))))))) -> (((! inspiratoryPhaseEnd) S ((! inspiratoryPhaseEnd) & ((PCVMode & inspiratoryPauseButton) & (Z (! (PCVMode & inspiratoryPauseButton)))))) | (inspiratoryPauseButton -> (inValveClose & outValveClose)))) S (((O[0,40] (inspiratoryPhaseEnd & ((Y (! inspiratoryPhaseEnd)) | ((PCVMode & inspiratoryPauseButton) & (Z (! (PCVMode & inspiratoryPauseButton))))))) -> (((! inspiratoryPhaseEnd) S ((! inspiratoryPhaseEnd) & ((PCVMode & inspiratoryPauseButton) & (Z (! (PCVMode & inspiratoryPauseButton)))))) | (inspiratoryPauseButton -> (inValveClose & outValveClose)))) & ((PCVMode & inspiratoryPauseButton) & (Z (! (PCVMode & inspiratoryPauseButton))))))));
CONT.24;At the end of an inspiration phase, if inspiratory pause is not required and the Recruitment Maneuver (RM) is set by the GUI, a Recruitment Maneuver shall start (see CONT.43).;while PCVMode & RMButton when inspiratoryPhaseEnd Controller shall at the next timepoint satisfy RM;((H (((! (PCVMode & RMButton)) & (Y (PCVMode & RMButton))) -> (Y (((Y (inspiratoryPhaseEnd & ((Y (! inspiratoryPhaseEnd)) | ((PCVMode & RMButton) & (Z (! (PCVMode & RMButton))))))) -> (RM | ((PCVMode & RMButton) & (Z (! (PCVMode & RMButton)))))) S (((Y (inspiratoryPhaseEnd & ((Y (! inspiratoryPhaseEnd)) | ((PCVMode & RMButton) & (Z (! (PCVMode & RMButton))))))) -> (RM | ((PCVMode & RMButton) & (Z (! (PCVMode & RMButton)))))) & ((PCVMode & RMButton) & (Z (! (PCVMode & RMButton))))))))) & (((! ((! (PCVMode & RMButton)) & (Y (PCVMode & RMButton)))) S ((! ((! (PCVMode & RMButton)) & (Y (PCVMode & RMButton)))) & ((PCVMode & RMButton) & (Z (! (PCVMode & RMButton)))))) -> (((Y (inspiratoryPhaseEnd & ((Y (! inspiratoryPhaseEnd)) | ((PCVMode & RMButton) & (Z (! (PCVMode & RMButton))))))) -> (RM | ((PCVMode & RMButton) & (Z (! (PCVMode & RMButton)))))) S (((Y (inspiratoryPhaseEnd & ((Y (! inspiratoryPhaseEnd)) | ((PCVMode & RMButton) & (Z (! (PCVMode & RMButton))))))) -> (RM | ((PCVMode & RMButton) & (Z (! (PCVMode & RMButton)))))) & ((PCVMode & RMButton) & (Z (! (PCVMode & RMButton))))))));
CONT.25;When in the expiration phase, a new inspiration shall be initiated either after a breathing cycle is over, or when a spontaneous breath is detected. The maximum duration of the expiration phase (i.e., the Expiratory time) yields E = 60 / (RRPCV x (1 + I:EPCV ));in PCVMode Controller shall always satisfy (breathingCycleDone | patientBreathingRequest) => (breathingCycleStart & inspiratoryPhaseStart);(H (PCVMode -> ((breathingCycleDone | patientBreathingRequest) -> (breathingCycleStart & inspiratoryPhaseStart))));
CONT.26;Within the trigger window during the expiratory phase, in the case of spontaneous breathing, the ventilator shall trigger a new breathing cycle (i.e., it goes in inspiration phase) when it detects a sudden drop in pressure above the inhale trigger sensitivity (i.e., it yields the condition drop(PAW) > ITSPCV )). Note that drop is positive if the pressure drops.;while PCVMode when dropPAW > ITS_PCV Controller shall at the next timepoint satisfy patientBreathingRequest;((H (((! PCVMode) & (Y PCVMode)) -> (Y (((Y ((dropPAW > ITS_PCV) & ((Y (! (dropPAW > ITS_PCV))) | (PCVMode & (Z (! PCVMode)))))) -> (patientBreathingRequest | (PCVMode & (Z (! PCVMode))))) S (((Y ((dropPAW > ITS_PCV) & ((Y (! (dropPAW > ITS_PCV))) | (PCVMode & (Z (! PCVMode)))))) -> (patientBreathingRequest | (PCVMode & (Z (! PCVMode))))) & (PCVMode & (Z (! PCVMode)))))))) & (((! ((! PCVMode) & (Y PCVMode))) S ((! ((! PCVMode) & (Y PCVMode))) & (PCVMode & (Z (! PCVMode))))) -> (((Y ((dropPAW > ITS_PCV) & ((Y (! (dropPAW > ITS_PCV))) | (PCVMode & (Z (! PCVMode)))))) -> (patientBreathingRequest | (PCVMode & (Z (! PCVMode))))) S (((Y ((dropPAW > ITS_PCV) & ((Y (! (dropPAW > ITS_PCV))) | (PCVMode & (Z (! PCVMode)))))) -> (patientBreathingRequest | (PCVMode & (Z (! PCVMode))))) & (PCVMode & (Z (! PCVMode)))))));
CONT.27;If the controller is in the expiration phase, and it does not detect a spontaneous breath (i.e., the condition drop(PAW) > ITSPCV is false), within the expiration time, if the Expiratory Pause start is set by the GUI, an Expiratory Pause shall start (see CONT.42).;in PCVMode when expiratoryPauseButton & ExpiratoryPhaseEnd & !patientBreathingRequest Controller shall until buttonUnPressOr60Seconds satisfy expirationPhaseEnd & inValveClose & outValveClose;((H (((! PCVMode) & (Y PCVMode)) -> (Y ((((! ((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest))) S ((! ((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest))) & (PCVMode & (Z (! PCVMode))))) | (((! buttonUnPressOr60Seconds) S ((! buttonUnPressOr60Seconds) & (((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest)) & ((Y (! ((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest)))) | (PCVMode & (Z (! PCVMode))))))) -> ((expirationPhaseEnd & inValveClose) & outValveClose))) S ((((! ((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest))) S ((! ((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest))) & (PCVMode & (Z (! PCVMode))))) | (((! buttonUnPressOr60Seconds) S ((! buttonUnPressOr60Seconds) & (((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest)) & ((Y (! ((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest)))) | (PCVMode & (Z (! PCVMode))))))) -> ((expirationPhaseEnd & inValveClose) & outValveClose))) & (PCVMode & (Z (! PCVMode)))))))) & (((! ((! PCVMode) & (Y PCVMode))) S ((! ((! PCVMode) & (Y PCVMode))) & (PCVMode & (Z (! PCVMode))))) -> ((((! ((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest))) S ((! ((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest))) & (PCVMode & (Z (! PCVMode))))) | (((! buttonUnPressOr60Seconds) S ((! buttonUnPressOr60Seconds) & (((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest)) & ((Y (! ((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest)))) | (PCVMode & (Z (! PCVMode))))))) -> ((expirationPhaseEnd & inValveClose) & outValveClose))) S ((((! ((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest))) S ((! ((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest))) & (PCVMode & (Z (! PCVMode))))) | (((! buttonUnPressOr60Seconds) S ((! buttonUnPressOr60Seconds) & (((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest)) & ((Y (! ((expiratoryPauseButton & ExpiratoryPhaseEnd) & (! patientBreathingRequest)))) | (PCVMode & (Z (! PCVMode))))))) -> ((expirationPhaseEnd & inValveClose) & outValveClose))) & (PCVMode & (Z (! PCVMode)))))));
CONT.28;The target inspiratory pressure level shall be controlled by the Inspiratory Pressure parameter (Pinsp PCV ) and it is kept constant.;in PCVMode Controller shall always satisfy P_insp = P_inspPCV;(H (PCVMode -> (P_insp = P_inspPCV)));
CONT.30;The breath cycle shall start with the inspiration phase.;in PSVMode when BreathingCycleStart Controller shall at the next timepoint satisfy inspiratoryPhaseStart;((H (((! PSVMode) & (Y PSVMode)) -> (Y (((Y (BreathingCycleStart & ((Y (! BreathingCycleStart)) | (PSVMode & (Z (! PSVMode)))))) -> (inspiratoryPhaseStart | (PSVMode & (Z (! PSVMode))))) S (((Y (BreathingCycleStart & ((Y (! BreathingCycleStart)) | (PSVMode & (Z (! PSVMode)))))) -> (inspiratoryPhaseStart | (PSVMode & (Z (! PSVMode))))) & (PSVMode & (Z (! PSVMode)))))))) & (((! ((! PSVMode) & (Y PSVMode))) S ((! ((! PSVMode) & (Y PSVMode))) & (PSVMode & (Z (! PSVMode))))) -> (((Y (BreathingCycleStart & ((Y (! BreathingCycleStart)) | (PSVMode & (Z (! PSVMode)))))) -> (inspiratoryPhaseStart | (PSVMode & (Z (! PSVMode))))) S (((Y (BreathingCycleStart & ((Y (! BreathingCycleStart)) | (PSVMode & (Z (! PSVMode)))))) -> (inspiratoryPhaseStart | (PSVMode & (Z (! PSVMode))))) & (PSVMode & (Z (! PSVMode)))))));
CONT.32;The inspiration phase lasts until the inspiration peak is reached but no later than the max insp time psv is over. After that the expiration phase begins.;in PSVMode Controller shall until (P_insp >= MaxP_insp | inspClock >= inspiratoryTime) satisfy inspiratoryPhase;((H (((! PSVMode) & (Y PSVMode)) -> (Y ((((! ((P_insp >= MaxP_insp) | (inspClock >= inspiratoryTime))) S ((! ((P_insp >= MaxP_insp) | (inspClock >= inspiratoryTime))) & (PSVMode & (Z (! PSVMode))))) -> inspiratoryPhase) S ((((! ((P_insp >= MaxP_insp) | (inspClock >= inspiratoryTime))) S ((! ((P_insp >= MaxP_insp) | (inspClock >= inspiratoryTime))) & (PSVMode & (Z (! PSVMode))))) -> inspiratoryPhase) & (PSVMode & (Z (! PSVMode)))))))) & (((! ((! PSVMode) & (Y PSVMode))) S ((! ((! PSVMode) & (Y PSVMode))) & (PSVMode & (Z (! PSVMode))))) -> ((((! ((P_insp >= MaxP_insp) | (inspClock >= inspiratoryTime))) S ((! ((P_insp >= MaxP_insp) | (inspClock >= inspiratoryTime))) & (PSVMode & (Z (! PSVMode))))) -> inspiratoryPhase) S ((((! ((P_insp >= MaxP_insp) | (inspClock >= inspiratoryTime))) S ((! ((P_insp >= MaxP_insp) | (inspClock >= inspiratoryTime))) & (PSVMode & (Z (! PSVMode))))) -> inspiratoryPhase) & (PSVMode & (Z (! PSVMode)))))));
CONT.33;When the inspiratory flow (VE) drops below a fraction of the peak flow (Expiratory Trigger Setting (ETS)) of a given breath (i.e., it yields the condition VE<ETS*Peak VE), the ventilator shall stop providing pressure allowing exhalation.;in PSVMode when V_E < ExpiratoryTriggerSensitivity * PeakV_E Controller shall at the next timepoint satisfy expirationPhaseStart;((H (((! PSVMode) & (Y PSVMode)) -> (Y (((Y ((V_E < (ExpiratoryTriggerSensitivity * PeakV_E)) & ((Y (! (V_E < (ExpiratoryTriggerSensitivity * PeakV_E)))) | (PSVMode & (Z (! PSVMode)))))) -> (expirationPhaseStart | (PSVMode & (Z (! PSVMode))))) S (((Y ((V_E < (ExpiratoryTriggerSensitivity * PeakV_E)) & ((Y (! (V_E < (ExpiratoryTriggerSensitivity * PeakV_E)))) | (PSVMode & (Z (! PSVMode)))))) -> (expirationPhaseStart | (PSVMode & (Z (! PSVMode))))) & (PSVMode & (Z (! PSVMode)))))))) & (((! ((! PSVMode) & (Y PSVMode))) S ((! ((! PSVMode) & (Y PSVMode))) & (PSVMode & (Z (! PSVMode))))) -> (((Y ((V_E < (ExpiratoryTriggerSensitivity * PeakV_E)) & ((Y (! (V_E < (ExpiratoryTriggerSensitivity * PeakV_E)))) | (PSVMode & (Z (! PSVMode)))))) -> (expirationPhaseStart | (PSVMode & (Z (! PSVMode))))) S (((Y ((V_E < (ExpiratoryTriggerSensitivity * PeakV_E)) & ((Y (! (V_E < (ExpiratoryTriggerSensitivity * PeakV_E)))) | (PSVMode & (Z (! PSVMode)))))) -> (expirationPhaseStart | (PSVMode & (Z (! PSVMode))))) & (PSVMode & (Z (! PSVMode)))))));
CONT.34;At the end of an inspiration phase, if the Inspiratory Pause is set by the GUI, an Inspiratory Pause shall start (see CONT.41).;while PSVMode & inspiratoryPauseButton when inspiratoryPhaseEnd Controller shall for 40 seconds satisfy (inspiratoryPauseButton => inValveClose & outValveClose);((H (((! (PSVMode & inspiratoryPauseButton)) & (Y (PSVMode & inspiratoryPauseButton))) -> (Y (((O[0,40] (inspiratoryPhaseEnd & ((Y (! inspiratoryPhaseEnd)) | ((PSVMode & inspiratoryPauseButton) & (Z (! (PSVMode & inspiratoryPauseButton))))))) -> (((! inspiratoryPhaseEnd) S ((! inspiratoryPhaseEnd) & ((PSVMode & inspiratoryPauseButton) & (Z (! (PSVMode & inspiratoryPauseButton)))))) | (inspiratoryPauseButton -> (inValveClose & outValveClose)))) S (((O[0,40] (inspiratoryPhaseEnd & ((Y (! inspiratoryPhaseEnd)) | ((PSVMode & inspiratoryPauseButton) & (Z (! (PSVMode & inspiratoryPauseButton))))))) -> (((! inspiratoryPhaseEnd) S ((! inspiratoryPhaseEnd) & ((PSVMode & inspiratoryPauseButton) & (Z (! (PSVMode & inspiratoryPauseButton)))))) | (inspiratoryPauseButton -> (inValveClose & outValveClose)))) & ((PSVMode & inspiratoryPauseButton) & (Z (! (PSVMode & inspiratoryPauseButton))))))))) & (((! ((! (PSVMode & inspiratoryPauseButton)) & (Y (PSVMode & inspiratoryPauseButton)))) S ((! ((! (PSVMode & inspiratoryPauseButton)) & (Y (PSVMode & inspiratoryPauseButton)))) & ((PSVMode & inspiratoryPauseButton) & (Z (! (PSVMode & inspiratoryPauseButton)))))) -> (((O[0,40] (inspiratoryPhaseEnd & ((Y (! inspiratoryPhaseEnd)) | ((PSVMode & inspiratoryPauseButton) & (Z (! (PSVMode & inspiratoryPauseButton))))))) -> (((! inspiratoryPhaseEnd) S ((! inspiratoryPhaseEnd) & ((PSVMode & inspiratoryPauseButton) & (Z (! (PSVMode & inspiratoryPauseButton)))))) | (inspiratoryPauseButton -> (inValveClose & outValveClose)))) S (((O[0,40] (inspiratoryPhaseEnd & ((Y (! inspiratoryPhaseEnd)) | ((PSVMode & inspiratoryPauseButton) & (Z (! (PSVMode & inspiratoryPauseButton))))))) -> (((! inspiratoryPhaseEnd) S ((! inspiratoryPhaseEnd) & ((PSVMode & inspiratoryPauseButton) & (Z (! (PSVMode & inspiratoryPauseButton)))))) | (inspiratoryPauseButton -> (inValveClose & outValveClose)))) & ((PSVMode & inspiratoryPauseButton) & (Z (! (PSVMode & inspiratoryPauseButton))))))));
CONT.35;At the end of an inspiration phase if no inspiration pause is required and the Recruitment Maneuver (RM) is set by the GUI, a Recruitment Maneuver shall start (see CONT.43).;while PSVMode & RMButton when inspiratoryPhaseEnd Controller shall at the next timepoint satisfy RM;((H (((! (PSVMode & RMButton)) & (Y (PSVMode & RMButton))) -> (Y (((Y (inspiratoryPhaseEnd & ((Y (! inspiratoryPhaseEnd)) | ((PSVMode & RMButton) & (Z (! (PSVMode & RMButton))))))) -> (RM | ((PSVMode & RMButton) & (Z (! (PSVMode & RMButton)))))) S (((Y (inspiratoryPhaseEnd & ((Y (! inspiratoryPhaseEnd)) | ((PSVMode & RMButton) & (Z (! (PSVMode & RMButton))))))) -> (RM | ((PSVMode & RMButton) & (Z (! (PSVMode & RMButton)))))) & ((PSVMode & RMButton) & (Z (! (PSVMode & RMButton))))))))) & (((! ((! (PSVMode & RMButton)) & (Y (PSVMode & RMButton)))) S ((! ((! (PSVMode & RMButton)) & (Y (PSVMode & RMButton)))) & ((PSVMode & RMButton) & (Z (! (PSVMode & RMButton)))))) -> (((Y (inspiratoryPhaseEnd & ((Y (! inspiratoryPhaseEnd)) | ((PSVMode & RMButton) & (Z (! (PSVMode & RMButton))))))) -> (RM | ((PSVMode & RMButton) & (Z (! (PSVMode & RMButton)))))) S (((Y (inspiratoryPhaseEnd & ((Y (! inspiratoryPhaseEnd)) | ((PSVMode & RMButton) & (Z (! (PSVMode & RMButton))))))) -> (RM | ((PSVMode & RMButton) & (Z (! (PSVMode & RMButton)))))) & ((PSVMode & RMButton) & (Z (! (PSVMode & RMButton))))))));
CONT.36.1;A new inspiration shall be initiated by a sudden drop in pressure above the inhale trigger sensitivity (ITSPSV ), which shall be set by the user (i.e., it yields the condition drop(PAW) > ITSPSV )).;while PSVMode & expiratoryPhase when dropPAW > ITS_PSV Controller shall at the next timepoint satisfy patientBreathingRequest;((H (((! (PSVMode & expiratoryPhase)) & (Y (PSVMode & expiratoryPhase))) -> (Y (((Y ((dropPAW > ITS_PSV) & ((Y (! (dropPAW > ITS_PSV))) | ((PSVMode & expiratoryPhase) & (Z (! (PSVMode & expiratoryPhase))))))) -> (patientBreathingRequest | ((PSVMode & expiratoryPhase) & (Z (! (PSVMode & expiratoryPhase)))))) S (((Y ((dropPAW > ITS_PSV) & ((Y (! (dropPAW > ITS_PSV))) | ((PSVMode & expiratoryPhase) & (Z (! (PSVMode & expiratoryPhase))))))) -> (patientBreathingRequest | ((PSVMode & expiratoryPhase) & (Z (! (PSVMode & expiratoryPhase)))))) & ((PSVMode & expiratoryPhase) & (Z (! (PSVMode & expiratoryPhase))))))))) & (((! ((! (PSVMode & expiratoryPhase)) & (Y (PSVMode & expiratoryPhase)))) S ((! ((! (PSVMode & expiratoryPhase)) & (Y (PSVMode & expiratoryPhase)))) & ((PSVMode & expiratoryPhase) & (Z (! (PSVMode & expiratoryPhase)))))) -> (((Y ((dropPAW > ITS_PSV) & ((Y (! (dropPAW > ITS_PSV))) | ((PSVMode & expiratoryPhase) & (Z (! (PSVMode & expiratoryPhase))))))) -> (patientBreathingRequest | ((PSVMode & expiratoryPhase) & (Z (! (PSVMode & expiratoryPhase)))))) S (((Y ((dropPAW > ITS_PSV) & ((Y (! (dropPAW > ITS_PSV))) | ((PSVMode & expiratoryPhase) & (Z (! (PSVMode & expiratoryPhase))))))) -> (patientBreathingRequest | ((PSVMode & expiratoryPhase) & (Z (! (PSVMode & expiratoryPhase)))))) & ((PSVMode & expiratoryPhase) & (Z (! (PSVMode & expiratoryPhase))))))));
CONT.36.2;If the controller is in expiration phase and a spontaneous breath is not detected (i.e., the condition drop(PAW) > ITSPSV ) is false), within the interval [min exp time psv : apnea lag], if the Expiratory Pause is set by the GUI, an Expiratory Pause shall start (see CONT.42).;while PSVMode when expiratoryPauseButton & expClock <= apneaLagTime & !patientBreathingRequest Controller shall until buttonUnPressOr60Seconds satisfy expirationPhaseEnd & inValveClose & outValveClose;((H (((! PSVMode) & (Y PSVMode)) -> (Y ((((! ((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest))) S ((! ((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest))) & (PSVMode & (Z (! PSVMode))))) | (((! buttonUnPressOr60Seconds) S ((! buttonUnPressOr60Seconds) & (((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest)) & ((Y (! ((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest)))) | (PSVMode & (Z (! PSVMode))))))) -> ((expirationPhaseEnd & inValveClose) & outValveClose))) S ((((! ((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest))) S ((! ((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest))) & (PSVMode & (Z (! PSVMode))))) | (((! buttonUnPressOr60Seconds) S ((! buttonUnPressOr60Seconds) & (((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest)) & ((Y (! ((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest)))) | (PSVMode & (Z (! PSVMode))))))) -> ((expirationPhaseEnd & inValveClose) & outValveClose))) & (PSVMode & (Z (! PSVMode)))))))) & (((! ((! PSVMode) & (Y PSVMode))) S ((! ((! PSVMode) & (Y PSVMode))) & (PSVMode & (Z (! PSVMode))))) -> ((((! ((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest))) S ((! ((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest))) & (PSVMode & (Z (! PSVMode))))) | (((! buttonUnPressOr60Seconds) S ((! buttonUnPressOr60Seconds) & (((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest)) & ((Y (! ((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest)))) | (PSVMode & (Z (! PSVMode))))))) -> ((expirationPhaseEnd & inValveClose) & outValveClose))) S ((((! ((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest))) S ((! ((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest))) & (PSVMode & (Z (! PSVMode))))) | (((! buttonUnPressOr60Seconds) S ((! buttonUnPressOr60Seconds) & (((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest)) & ((Y (! ((expiratoryPauseButton & (expClock <= apneaLagTime)) & (! patientBreathingRequest)))) | (PSVMode & (Z (! PSVMode))))))) -> ((expirationPhaseEnd & inValveClose) & outValveClose))) & (PSVMode & (Z (! PSVMode)))))));
CONT.36.3;min exp time psv shall be the half of the last inspiration time. min exp time psv shall be in the interval [0.4 : 2] sec.;in PSVMode Controller shall always satisfy minExpiratoryTime >= 0.4 & minExpiratoryTime <= 2 & (expiratoryPhase => minExpiratoryTime = inspClock/2);(H (PSVMode -> (((minExpiratoryTime >= 0.4) & (minExpiratoryTime <= 2)) & (expiratoryPhase -> (minExpiratoryTime = (inspClock / 2))))));
CONT.37;If the patient does not trigger a breath within the time of the apnea trigger window (apnea lag) the ventilator shall switch to PCV mode (apnea backup ventilation) with respiratory rate RRAP , inspiratory pressure Pinsp AP , and the ratio between inspiratory time and Expiratory time I:EAP .;in PSVMode when expClock >= apneaLagTime Controller shall at the next timepoint satisfy apnea & PCVMode & RR = RR_AP & P_insp = P_inspAP & ItoE = ItoE_AP;((H (((! PSVMode) & (Y PSVMode)) -> (Y (((Y ((expClock >= apneaLagTime) & ((Y (! (expClock >= apneaLagTime))) | (PSVMode & (Z (! PSVMode)))))) -> (((((apnea & PCVMode) & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP)) | (PSVMode & (Z (! PSVMode))))) S (((Y ((expClock >= apneaLagTime) & ((Y (! (expClock >= apneaLagTime))) | (PSVMode & (Z (! PSVMode)))))) -> (((((apnea & PCVMode) & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP)) | (PSVMode & (Z (! PSVMode))))) & (PSVMode & (Z (! PSVMode)))))))) & (((! ((! PSVMode) & (Y PSVMode))) S ((! ((! PSVMode) & (Y PSVMode))) & (PSVMode & (Z (! PSVMode))))) -> (((Y ((expClock >= apneaLagTime) & ((Y (! (expClock >= apneaLagTime))) | (PSVMode & (Z (! PSVMode)))))) -> (((((apnea & PCVMode) & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP)) | (PSVMode & (Z (! PSVMode))))) S (((Y ((expClock >= apneaLagTime) & ((Y (! (expClock >= apneaLagTime))) | (PSVMode & (Z (! PSVMode)))))) -> (((((apnea & PCVMode) & (RR = RR_AP)) & (P_insp = P_inspAP)) & (ItoE = ItoE_AP)) | (PSVMode & (Z (! PSVMode))))) & (PSVMode & (Z (! PSVMode)))))));
CONT.38;When the ventilator is in Start-up or VentilationOff mode, the in valve pressure shall be set to close and the out valve shall be open.;while StartUpMode | StandbyMode Controller shall always satisfy inValveClose & outValveOpen;(H ((StartUpMode | StandbyMode) -> (inValveClose & outValveOpen)));
CONT.39;When the ventilator is in an Inspiration state, the out valve shall be closed and the in valve pressure shall be set to target inspiratory pressure (Pinsp of the corresponding mode).;while inspiratoryPhase Controller shall always satisfy outValveClose & (PCVMode & !apnea => P_insp = P_inspPCV) & (PSVMode => P_insp = P_inspPSV) & (PCVMode & apnea => P_insp = P_inspAP);(H (inspiratoryPhase -> (((outValveClose & ((PCVMode & (! apnea)) -> (P_insp = P_inspPCV))) & (PSVMode -> (P_insp = P_inspPSV))) & ((PCVMode & apnea) -> (P_insp = P_inspAP)))));
CONT.40;When the ventilator is in an expiration state the in valve shall be closed (pressure 0) and the out valve shall be open.;while expiratoryState Controller shall always satisfy inValveClose & outValveOpen;(H (expiratoryState -> (inValveClose & outValveOpen)));
CONT.41;In PCV and PSV modes there shall be the possibility to initiate an Inspiratory Pause if it is set by the GUI.;while (PCVMode | PSVMode) when inspiratoryPauseButton Controller shall eventually satisfy inspiratoryPause | !inspiratoryPauseButton;((H (((! (PCVMode | PSVMode)) & (Y (PCVMode | PSVMode))) -> (Y (((! inspiratoryPauseButton) S ((! inspiratoryPauseButton) & ((PCVMode | PSVMode) & (Z (! (PCVMode | PSVMode)))))) | (! ((! (inspiratoryPause | (! inspiratoryPauseButton))) S ((! (inspiratoryPause | (! inspiratoryPauseButton))) & (inspiratoryPauseButton & ((Y (! inspiratoryPauseButton)) | ((PCVMode | PSVMode) & (Z (! (PCVMode | PSVMode))))))))))))) & (((! ((! (PCVMode | PSVMode)) & (Y (PCVMode | PSVMode)))) S ((! ((! (PCVMode | PSVMode)) & (Y (PCVMode | PSVMode)))) & ((PCVMode | PSVMode) & (Z (! (PCVMode | PSVMode)))))) -> (((! inspiratoryPauseButton) S ((! inspiratoryPauseButton) & ((PCVMode | PSVMode) & (Z (! (PCVMode | PSVMode)))))) | (! ((! (inspiratoryPause | (! inspiratoryPauseButton))) S ((! (inspiratoryPause | (! inspiratoryPauseButton))) & (inspiratoryPauseButton & ((Y (! inspiratoryPauseButton)) | ((PCVMode | PSVMode) & (Z (! (PCVMode | PSVMode))))))))))));
CONT.41.1;When the Inspiratory Pause is set by the GUI, the ventilator shall wait for the end of the next inspiration phase, and if the Inspiratory Pause still required, both the inspiratory and expiratory valves will close until the inspiratory pause is stopped by the GUI.;while (PCVMode | PSVMode) & inspiratoryPauseButton when inspiratoryPhaseEnd Controller shall at the next timepoint satisfy (inspiratoryPauseButton => inspiratoryPause & inValveClose & outValveClose);((H (((! ((PCVMode | PSVMode) & inspiratoryPauseButton)) & (Y ((PCVMode | PSVMode) & inspiratoryPauseButton))) -> (Y (((Y (inspiratoryPhaseEnd & ((Y (! inspiratoryPhaseEnd)) | (((PCVMode | PSVMode) & inspiratoryPauseButton) & (Z (! ((PCVMode | PSVMode) & inspiratoryPauseButton))))))) -> ((inspiratoryPauseButton -> ((inspiratoryPause & inValveClose) & outValveClose)) | (((PCVMode | PSVMode) & inspiratoryPauseButton) & (Z (! ((PCVMode | PSVMode) & inspiratoryPauseButton)))))) S (((Y (inspiratoryPhaseEnd & ((Y (! inspiratoryPhaseEnd)) | (((PCVMode | PSVMode) & inspiratoryPauseButton) & (Z (! ((PCVMode | PSVMode) & inspiratoryPauseButton))))))) -> ((inspiratoryPauseButton -> ((inspiratoryPause & inValveClose) & outValveClose)) | (((PCVMode | PSVMode) & inspiratoryPauseButton) & (Z (! ((PCVMode | PSVMode) & inspiratoryPauseButton)))))) & (((PCVMode | PSVMode) & inspiratoryPauseButton) & (Z (! ((PCVMode | PSVMode) & inspiratoryPauseButton))))))))) & (((! ((! ((PCVMode | PSVMode) & inspiratoryPauseButton)) & (Y ((PCVMode | PSVMode) & inspiratoryPauseButton)))) S ((! ((! ((PCVMode | PSVMode) & inspiratoryPauseButton)) & (Y ((PCVMode | PSVMode) & inspiratoryPauseButton)))) & (((PCVMode | PSVMode) & inspiratoryPauseButton) & (Z (! ((PCVMode | PSVMode) & inspiratoryPauseButton)))))) -> (((Y (inspiratoryPhaseEnd & ((Y (! inspiratoryPhaseEnd)) | (((PCVMode | PSVMode) & inspiratoryPauseButton) & (Z (! ((PCVMode | PSVMode) & inspiratoryPauseButton))))))) -> ((inspiratoryPauseButton -> ((inspiratoryPause & inValveClose) & outValveClose)) | (((PCVMode | PSVMode) & inspiratoryPauseButton) & (Z (! ((PCVMode | PSVMode) & inspiratoryPauseButton)))))) S (((Y (inspiratoryPhaseEnd & ((Y (! inspiratoryPhaseEnd)) | (((PCVMode | PSVMode) & inspiratoryPauseButton) & (Z (! ((PCVMode | PSVMode) & inspiratoryPauseButton))))))) -> ((inspiratoryPauseButton -> ((inspiratoryPause & inValveClose) & outValveClose)) | (((PCVMode | PSVMode) & inspiratoryPauseButton) & (Z (! ((PCVMode | PSVMode) & inspiratoryPauseButton)))))) & (((PCVMode | PSVMode) & inspiratoryPauseButton) & (Z (! ((PCVMode | PSVMode) & inspiratoryPauseButton))))))));
CONT.41.2;When inspiratory pause timeout (max ins pause) is over, the cycle shall proceed immediately to expiration.;when inspiratoryPause Controller shall after 40 seconds satisfy !inspiratoryPause & expirationPhaseStart;((H ((O[0,40] (inspiratoryPause & (Z (! inspiratoryPause)))) -> ((H (! inspiratoryPause)) | (! ((! inspiratoryPause) & expirationPhaseStart))))) & (H ((O[41,41] ((inspiratoryPause & (Z (! inspiratoryPause))) & (! ((! inspiratoryPause) & expirationPhaseStart)))) -> (O[0,40] ((! (Y TRUE)) | ((! inspiratoryPause) & expirationPhaseStart))))));
CONT.42;In PCV and PSV modes there shall be the possibility to initiate an Expiratory Pause if it is set by the GUI.;while (PCVMode | PSVMode) when expiratoryPauseButton Controller shall eventually satisfy expiratoryPause | !expiratoryPauseButton;((H (((! (PCVMode | PSVMode)) & (Y (PCVMode | PSVMode))) -> (Y (((! expiratoryPauseButton) S ((! expiratoryPauseButton) & ((PCVMode | PSVMode) & (Z (! (PCVMode | PSVMode)))))) | (! ((! (expiratoryPause | (! expiratoryPauseButton))) S ((! (expiratoryPause | (! expiratoryPauseButton))) & (expiratoryPauseButton & ((Y (! expiratoryPauseButton)) | ((PCVMode | PSVMode) & (Z (! (PCVMode | PSVMode))))))))))))) & (((! ((! (PCVMode | PSVMode)) & (Y (PCVMode | PSVMode)))) S ((! ((! (PCVMode | PSVMode)) & (Y (PCVMode | PSVMode)))) & ((PCVMode | PSVMode) & (Z (! (PCVMode | PSVMode)))))) -> (((! expiratoryPauseButton) S ((! expiratoryPauseButton) & ((PCVMode | PSVMode) & (Z (! (PCVMode | PSVMode)))))) | (! ((! (expiratoryPause | (! expiratoryPauseButton))) S ((! (expiratoryPause | (! expiratoryPauseButton))) & (expiratoryPauseButton & ((Y (! expiratoryPauseButton)) | ((PCVMode | PSVMode) & (Z (! (PCVMode | PSVMode))))))))))));
CONT.42.1;When the Expiratory Pause is set by the GUI, the ventilator shall wait for the end of the next expiration phase, and if the Expiratory Pause is still required, both the inspiratory and expiratory valves will close until the expiratory pause is stopped by the GUI.;while (PCVMode | PSVMode) & expiratoryPauseButton when expiratoryPhaseEnd Controller shall at the next timepoint satisfy (expiratoryPauseButton => expiratoryPause & inValveClose & outValveClose);((H (((! ((PCVMode | PSVMode) & expiratoryPauseButton)) & (Y ((PCVMode | PSVMode) & expiratoryPauseButton))) -> (Y (((Y (expiratoryPhaseEnd & ((Y (! expiratoryPhaseEnd)) | (((PCVMode | PSVMode) & expiratoryPauseButton) & (Z (! ((PCVMode | PSVMode) & expiratoryPauseButton))))))) -> ((expiratoryPauseButton -> ((expiratoryPause & inValveClose) & outValveClose)) | (((PCVMode | PSVMode) & expiratoryPauseButton) & (Z (! ((PCVMode | PSVMode) & expiratoryPauseButton)))))) S (((Y (expiratoryPhaseEnd & ((Y (! expiratoryPhaseEnd)) | (((PCVMode | PSVMode) & expiratoryPauseButton) & (Z (! ((PCVMode | PSVMode) & expiratoryPauseButton))))))) -> ((expiratoryPauseButton -> ((expiratoryPause & inValveClose) & outValveClose)) | (((PCVMode | PSVMode) & expiratoryPauseButton) & (Z (! ((PCVMode | PSVMode) & expiratoryPauseButton)))))) & (((PCVMode | PSVMode) & expiratoryPauseButton) & (Z (! ((PCVMode | PSVMode) & expiratoryPauseButton))))))))) & (((! ((! ((PCVMode | PSVMode) & expiratoryPauseButton)) & (Y ((PCVMode | PSVMode) & expiratoryPauseButton)))) S ((! ((! ((PCVMode | PSVMode) & expiratoryPauseButton)) & (Y ((PCVMode | PSVMode) & expiratoryPauseButton)))) & (((PCVMode | PSVMode) & expiratoryPauseButton) & (Z (! ((PCVMode | PSVMode) & expiratoryPauseButton)))))) -> (((Y (expiratoryPhaseEnd & ((Y (! expiratoryPhaseEnd)) | (((PCVMode | PSVMode) & expiratoryPauseButton) & (Z (! ((PCVMode | PSVMode) & expiratoryPauseButton))))))) -> ((expiratoryPauseButton -> ((expiratoryPause & inValveClose) & outValveClose)) | (((PCVMode | PSVMode) & expiratoryPauseButton) & (Z (! ((PCVMode | PSVMode) & expiratoryPauseButton)))))) S (((Y (expiratoryPhaseEnd & ((Y (! expiratoryPhaseEnd)) | (((PCVMode | PSVMode) & expiratoryPauseButton) & (Z (! ((PCVMode | PSVMode) & expiratoryPauseButton))))))) -> ((expiratoryPauseButton -> ((expiratoryPause & inValveClose) & outValveClose)) | (((PCVMode | PSVMode) & expiratoryPauseButton) & (Z (! ((PCVMode | PSVMode) & expiratoryPauseButton)))))) & (((PCVMode | PSVMode) & expiratoryPauseButton) & (Z (! ((PCVMode | PSVMode) & expiratoryPauseButton))))))));
CONT.42.2;When expiratory pause timeout (max exp pause) is over, the cycle shall proceed immediately to inspiration.;when expiratoryPause Controller shall after 40 seconds satisfy !expiratoryPause & inspiratoryPhaseStart;((H ((O[0,40] (expiratoryPause & (Z (! expiratoryPause)))) -> ((H (! expiratoryPause)) | (! ((! expiratoryPause) & inspiratoryPhaseStart))))) & (H ((O[41,41] ((expiratoryPause & (Z (! expiratoryPause))) & (! ((! expiratoryPause) & inspiratoryPhaseStart)))) -> (O[0,40] ((! (Y TRUE)) | ((! expiratoryPause) & inspiratoryPhaseStart))))));
CONT.43;In PCV and PSV mode, at the end of an inspiration and if inspiratory pause is not required, it shall be possible to initiate a lung recruitment procedure, termed Recruitment Maneuver (RM), if it is required by the GUI.;while (PCVMode | PSVMode) & RMButton & !inspiratoryPauseButton when inspiratoryPhaseEnd Controller shall at the next timepoint satisfy RM;((H (((! (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton))) & (Y (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)))) -> (Y (((Y (inspiratoryPhaseEnd & ((Y (! inspiratoryPhaseEnd)) | ((((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)) & (Z (! (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)))))))) -> (RM | ((((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)) & (Z (! (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton))))))) S (((Y (inspiratoryPhaseEnd & ((Y (! inspiratoryPhaseEnd)) | ((((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)) & (Z (! (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)))))))) -> (RM | ((((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)) & (Z (! (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton))))))) & ((((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)) & (Z (! (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)))))))))) & (((! ((! (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton))) & (Y (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton))))) S ((! ((! (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton))) & (Y (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton))))) & ((((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)) & (Z (! (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton))))))) -> (((Y (inspiratoryPhaseEnd & ((Y (! inspiratoryPhaseEnd)) | ((((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)) & (Z (! (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)))))))) -> (RM | ((((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)) & (Z (! (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton))))))) S (((Y (inspiratoryPhaseEnd & ((Y (! inspiratoryPhaseEnd)) | ((((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)) & (Z (! (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)))))))) -> (RM | ((((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)) & (Z (! (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton))))))) & ((((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)) & (Z (! (((PCVMode | PSVMode) & RMButton) & (! inspiratoryPauseButton)))))))));
CONT.43.1;The controller shall stop RM if it is required from the GUI.;while RM if !RMButton Controller shall at the next timepoint satisfy !RM & expirationPhaseStart;((H (((! RM) & (Y RM)) -> (Y (((Y ((! RMButton) & ((Y RMButton) | (RM & (Z (! RM)))))) -> (((! RM) & expirationPhaseStart) | (RM & (Z (! RM))))) S (((Y ((! RMButton) & ((Y RMButton) | (RM & (Z (! RM)))))) -> (((! RM) & expirationPhaseStart) | (RM & (Z (! RM))))) & (RM & (Z (! RM)))))))) & (((! ((! RM) & (Y RM))) S ((! ((! RM) & (Y RM))) & (RM & (Z (! RM))))) -> (((Y ((! RMButton) & ((Y RMButton) | (RM & (Z (! RM)))))) -> (((! RM) & expirationPhaseStart) | (RM & (Z (! RM))))) S (((Y ((! RMButton) & ((Y RMButton) | (RM & (Z (! RM)))))) -> (((! RM) & expirationPhaseStart) | (RM & (Z (! RM))))) & (RM & (Z (! RM)))))));
CONT.43.2;The Recruitment Maneuver, if not actively stopped by the GUI, has a timeout (max rm time). After the Recruitment Maneuver phase expiration phase begins.;when RM Controller shall after 10 seconds satisfy !RM & expirationPhaseStart;((H ((O[0,10] (RM & (Z (! RM)))) -> ((H (! RM)) | (! ((! RM) & expirationPhaseStart))))) & (H ((O[11,11] ((RM & (Z (! RM))) & (! ((! RM) & expirationPhaseStart)))) -> (O[0,10] ((! (Y TRUE)) | ((! RM) & expirationPhaseStart))))));
CONT.43.3;In RM the out valve shall be closed and the in valve shall be opened to allow lung inflation at PRM.;while RM Controller shall always satisfy outValveClose & inValveOpen;(H (RM -> (outValveClose & inValveOpen)));
CONT.44;If PAW exceeds Max Pinsp during inspiration, the cycle shall proceed immediately to expiration.;if P_insp > MaxP_insp Controller shall at the next timepoint satisfy inspiratoryPhaseEnd & expirationPhaseStart;(H ((Y ((P_insp > MaxP_insp) & (Z (! (P_insp > MaxP_insp))))) -> ((inspiratoryPhaseEnd & expirationPhaseStart) | (! (Y TRUE)))));
CONT.45;Before monitoring a sudden drop in pressure above the inhale trigger sensitivity ITS, the controller shall wait for the trigger window (0.7 sec).;when expirationPhaseStart Controller shall after 700 milliseconds satisfy monitorInhaleTrigger;((H ((O[0,700] (expirationPhaseStart & (Z (! expirationPhaseStart)))) -> ((H (! expirationPhaseStart)) | (! monitorInhaleTrigger)))) & (H ((O[701,701] ((expirationPhaseStart & (Z (! expirationPhaseStart))) & (! monitorInhaleTrigger))) -> (O[0,700] ((! (Y TRUE)) | monitorInhaleTrigger)))));
